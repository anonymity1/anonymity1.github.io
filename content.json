{"pages":[],"posts":[{"title":"8月摸鱼","text":"八月划水 [TOC] 短跑100米苏炳添半决赛9.83秒破亚洲纪录，32岁老将，放在里约奥运会和博尔特同台竞技也是银牌水准，在我眼里其历史地位接近刘翔。于是好奇查了查这个人的相关资料，竟发现他还发表了不少论文和励志小故事，读了一些他发表的文章，感觉有趣，遂记录。 一篇论文苏炳添在2019年发表的一篇关于100米短跑论文，本篇论文非常有趣，一些观点也很有启发意义。 新时代中国男子 100m 短跑：回顾与展望 123456789@article{苏炳添2019新时代中国男子, title={新时代中国男子 100m 短跑: 回顾与展望}, author={苏炳添 and 邓民威 and 徐泽 and 梁伟 and 姜自立 and 王国杰}, journal={体育科学}, volume={39}, number={2}, pages={22--28}, year={2019}} 新时代这个词可以说很中国特色了，全文累计出现32次，在第五部分中国男子100m短跑短跑发展对中国竞技体育的启示中出现的尤其多。 以笔者为例是不是体育类论文就可以这么干？前段时间帮老板找了找关于掷铁饼的论文，里面也是以个别优秀运动员为例进行分析 科学训练的作用 所谓科学化训练理念，是指符合专项竞技能力发展规律、人体生理机能状态变化规律和运动员个人特点的训练理念。美国是世界公认的科学化训练程度最高的国家，笔者的现任教练 Randy Huntington，谢震业和韦永丽的现任教练 Rana Reider 均 是 来 自 美 国 的 著 名 教 练 员 。 Randy Huntington 和 Rana Reider 都是典型的“科研型教练”，他俩的整体训练思路是：以“冠军模型”为指导，通过高科技仪器和设备对运动员体能、技术、恢复等各个环节进行全方位监控，据此发现问题，寻找差距，制订个性化的训练方案，进而恶补短板，全面提升运动员的竞技能力。 看看用到的设备和监测指标 一般人也玩不起哈哈哈，另外从训练的作用来看，和高水平研究机构的合作非常重要，在突破自我和人类极限上，甚至起决定性作用。舆论有些民族主义（外宣内宣化）的情况下，还是要认识到别人能牛b的根本因素是什么。 评价总结6点中国团体100米跑成功经验，给出4条未来发展方略，有定量分析，也有一些事例分析，但是事例分析更多是以见闻这种形式阐述，一般论文这么写可能需要加一些数据，但毕竟作者是跑神哈哈哈。 一篇小故事经典鸡汤，没想到苏神不仅能跑步，写论文，还能煨鸡汤。 1234567891011121314151617# 中华儿女@article{苏炳添2018演绎, title={演绎 “中国速度”}, author={苏炳添}, journal={中华儿女}, number={4}, pages={4--4}, year={2018}}# 意林@article{苏炳添2019我必须追上去, title={我必须追上去}, author={苏炳添}, journal={意林 (原创版)}, year={2019}} 两篇文章是一样的可能意林抄中华儿女的，还是苏神一稿多投（bushi）？毕竟中华儿女是共青团中央主管，总设计师还提过词，而意林是长春市委宣传部主管。 跑神竟也是鸡汤大师 现在，我的竞争对象变成了自己。我的下一个目标，就是要突破9.90秒的成绩。这是一个大关，就像破 10 秒一样。我希望自己能够成为国内第一个突破 9.90秒的运动员。短跑一直被认为是挑战速度的极限。对于我来说，人不应该给自己设限，而要看看能不能逼自己做出新的成绩。突破自我极限的方法很简单，就是好好训练。 当你在特别累、特别无聊、特别枯燥的时候，想一想自己的目标，你就不累了。我的目标就是跑得更快。 一闻就是鸡汤的味道哈哈哈，还是论文读的舒服，老老实实讲了讲自己怎么样好好训练，怎么样能跑的快。或者是鸡汤文篇幅受限，不能讲具体的东西，只能传递一些看起来正确却又没什么帮助的大道理？","link":"/2021/08/02/8%E6%9C%88%E6%91%B8%E9%B1%BC/"},{"title":"NaiveGo","text":"简单的五子棋对战程序 从幼儿园开始学习围棋，一直到上初中之前，围棋可以说是我童年时代的最大爱好，依靠围棋也拿了不少奖项。可惜初中开始学业繁忙，围棋逐渐荒废，直到2016年上大学才算有些空闲时间，又恰逢AlphaGo横空出世，击败李世石和柯洁，打破了围棋是无法被AI求解的这一说法，算是重新捡起了围棋。因为自身对围棋的喜欢加上对所谓AI如何击败人类的好奇，从大学选择计算机专业开始，一直以来都想实现一个这样一个能够打败人类的围棋AI。限于本科阶段积累的知识和能力还不够，这个目标直到2021年寒假才算实现了非常小的一部分，也就是这个简单的五子棋程序 这是一个目标不断减小的过程，最开始打算实现一个简单的围棋AI，发现训练19路棋盘需要的算力太过庞大，然后考虑9路棋盘，这仍然足够庞大。加上围棋规则比较复杂，于是将目标转向五子棋，先打算整一个19路棋盘的五子棋，尽管五子棋规则简单，但训练数据量仍然过于庞大，于是缩小棋盘，弄了一个8x8棋盘的五子棋，然后迁移到10x10棋盘上。为什么是8x8呢，因为有位前辈开源了他对这样一个五子棋AI的实现，在8x8的五子棋棋盘有比较好的实现效果。有前人指路，自己写这样一个AI还是有一些信心的。至于更加艰难，在简单笔记本上难以实现的围棋AI，那就等以后有空再实现吧。 经验 Google+英文搜索通常能够找到适用于当前的解答。 在进行检索的过程当中，官方文档可以解决一些API如何调用，接口设定的问题，各种overflow可以解决一些非常神奇的bug，如果需要解决一些项目特有的问题，去看github的issue比较好。至于博客，尽管我也写博客，但不得不说，大部分问题的解决不用去翻博客，博客更多的不是用来解决问题，而是分享个人感受。最后吐槽一下用中文搜索获得的搜索内容，经常是翻到一些参差不齐的博客，然后发现这些博客内容差不多，对于解决问题来说效率很低。 实现算法密度特别高的项目需要2-5个小时的集中精力才能使项目有进展，需要提升专注力。 这也可能是我个人原因吧，坐下之后往往需要很长时间才能续接之前的思路，之后如果投入时间不长的话进度就会很微弱。之后要有意识提升自己的专注能力，感觉小学时候下围棋和初中做几何题时候非常专注，是不是当有一些明确目标和思路的时候自己的专注程度会提升呢？ 大致设计一个规划可以使得进度有保障，但是要对进度推迟有心理预期。 这应该就是之前讨论的专注程度还不大够导致的吧，需要有一个规划确保一下思路是明确的。自己大部分时候设定的计划预期偏高，所以进度推迟可能比较常见，不需要有太大心理落差，这样当目标完成之后反而会非常快乐。 确保完成每个模块后进行一个可视化效果较好的测试。 程序输出helloworld并不困难，但是要求算法既鲁棒性好又能力强就超级困难。如果希望在最终任务实现上效果比较好，那就尽量每个模块完成之后都测试比较多的数据，这样当执行最终任务时，可以比较快速确定bug的位置，从而加快项目进度。","link":"/2021/03/16/NaiveGo/"},{"title":"Hello World","text":"2021年1月26日 星期二 看到徐哥博客写的不亦乐乎，在复习计算复杂性时受益良多。本菜鸡表示对此心生神往，于是在2021年寒假空闲时简单搭个博客，记录一些闲暇时的感悟。 附言顺便说一下，徐哥写了不少计算复杂性的博客，还向我秀了一波成绩，但还是没我高:-)，（当然我没告诉他最后我的分数）。","link":"/2021/01/26/hello-world/"},{"title":"HiveD","text":"HiveD: Sharing a GPU Cluster for Deep Learning with Guarantees (OSDI’ 2020)，北大，Microsoft，港大合作的一篇文章。 多租户在GPU集群上进行DL训练是一种较为常见的场景，然而目前GPU集群资源分配是基于quota的，即每个任务指定需要的GPU数目，这样的粗粒度资源调度方式容易造成更长的累积延迟，本文因此提出了一种更细粒度GPU集群资源调度方式。 动机这是因为现有在公共GPU集群上为多租户分配训练资源的方式是基于quota的，即分配GPU的数目。公共GPU集群调度器为租户和私有集群里一样多的GPU数目，但是这样的GPU效率可能由于某些原因（单一node计算能力不强，没有足够GPU）造成当前租户任务完成时间增加，从而产生队列累积延迟。 公共GPU集群上可能会有多个node，每个node上有多个GPU。如果一个DL任务需要64个GPU，那么集群调度器产生一个8node，每个node分配8GPU的对应affinity。同时会有些很小的DL任务，这些任务可能只需要1-3个GPU，但是这样的DL任务也会占据一个node，由于很多的node被这样的小DL任务占据，集群调度器无法为需要64个GPU的DL任务的affinity找到对应的配置，所以这个大DL任务只能等待，由此产生了累积延迟。 这个问题似乎是可以被解决的，有些类似于内存管理中的memory fragmentation问题。 （这个动机似乎有点easy），不过底层资源没有池化，而是分层存在，确实是一个现实的问题。 解决方案本文提出了HiveD系统，确保共享GPU执行时是safety的。HiveD将GPU资源分为Virtual Private Cluster（VC）和physical Cluster两层。HiveD将每个租户表示为一个VC，每个VC会预先安排一系列的cell，这里的cell表示需要多少资源。 cell里的资源是分层的，这篇文章作者将资源分为5层：GPU -&gt; PCIe switch -&gt; CPU socket -&gt; node -&gt; Rack，通过分层实现细粒度资源调度。（这个分层有些疑惑，同时每一层内各个cell之间的通信恐怕也需要考虑） 如果将资源认为是池化的，一些常规的调度器，比如k8s default schedular会根据任务需要资源的数量直接分配资源，但是因为GPU集群里资源没有池化，所以需要再封装一层，将node以及更细粒度的资源池化，这也是这篇文章的核心idea。 同时由于分层资源的塔式结构，底层资源与上层资源有隶属关系，需要根据这种隶属关系调整分配的细粒度资源。这篇文章称之为buddy cell，当所有的buddy cell都是空闲的时候，那么就可以合并成一个更粗粒度的资源，在分配细粒度的资源时，通过考虑这种隶属关系，尽可能保持粗粒度的资源没有被占用，从而保证大的DL任务可以被正常执行而不用延迟。 最后是关于低优先级VC，这类VC可以被随时抢占，所以分配cell时，优先分配到那些没有被大DL任务占据的buddy cell当中，这样可以保证大概率不被抢占，同样对于guaranteed VC，优先分配buddy cell里没有低优先级任务的VC，从而降低抢占发生的次数。 实验环境2019年11月实际部署在openPAI项目中，集群当中有800多台GPU，Nvidia和AMD的，也包括200多台Azure GPU虚拟机。执行的任务包括NLP任务（BERT），AutoML实验，以及几百个单GPU任务。 项目构成：7700行golang代码，以及js，shell脚本和yaml配置文件。 工作流：和k8s的默认调度器配合工作，能够复用k8s调度器的基本逻辑和相关配置。 trace-based experiment: USENIX Annual Technical Conference (ATC’ 19） GPU cluster: 96-GPU cluster 部署在Azure上（24台NC2，NC2：4 个NVIDIA K80） 对比算法：没有用HiveD，而使用Quota的YARN-CS，Gandiva，Tiresias 启发应用到NUMA架构或者非PS架构的GPU集群，云当中应用HiveD。","link":"/2021/04/06/osdi2020-HiveD/"},{"title":"clockwork","text":"Serving DNNs like Clockwork: Performance Predictability from the bottom up (OSDI’ 2020) ，德国Max-Planck 软件系统研究所和美国Emory university合作的一篇文章。 由于卷积运算的复杂性，在应用层面执行DNN模型推理可能会存在一定的时延，当同时有多个DNN模型需要执行的时候，调度不同的DNN模型就会产生累计时延和尾延迟（tail latency），从而导致无法满足SLO（service-level objectives）。本文观察到DNN模型的执行时间是可以预测的，但是由于现有系统在多个层次上执行不同的调度策略，导致预估DNN模型执行时间非常困难，因此本文从底层构建了一个DNN推理模型调度系统，实现对DNN模型的执行时间预测，从而实现了更高质量的DNN模型调度。 动机和方法预测DNN推理模型执行时间对于执行。为什么已有系统难以实现对DNN推理模型执行时间的预测？从底层的Hardware level，OS level到顶层的Application level，在硬件层面指令乱序执行，操作系统层面各个进程竞争执行，以及应用层面竞争需要的计算存储资源，多级的竞争和调度使得预测一个DNN推理模型的执行时间非常艰难，所以这篇文章提出打破各个层面的松耦合，构建一个紧耦合系统，实现在顶层的DNN调度，从而可以确保对推理模型执行时间的预测。 实验宣称26 KLOC C++代码，实验环境私人小型集群。 12 servers：每个server有32 cores，768G RAM, 2 v100 GPUs 感受各种奇葩单词看的我有点难受，阅读体验极差，没有找到开源实现，影响力有待验证。","link":"/2021/04/07/osdi2020-clockwork/"},{"title":"q-learning","text":"强化学习并不新鲜。 2017年AlphaZero出来之后，一堆自媒体狂吹强化学习有多么牛b，利用DQN吊打普通的AlphaGo（说来惭愧，那阵自己还关注新智元和机器之心这种公众号）。 尽管好奇，可由于课程等诸多原因，一直没有闲暇的时间关注RL，直到2021年需要在研究领域用到强化学习算法，就简单了解和实践了一下，发现这个算法的核心思想其实也蛮简单，没有各路自媒体吹的那么神奇，于是将自己的一些理解简单记录一下。 智能体和环境人们总是希望创造出一种通用智能体，能够通过和环境不断的交互，在实现目标的过程当中，自己总结经验，得出与环境交互最优的方法。 这种智能体与人类的思维模式很类似，因为从婴儿牙牙学语到高中生根据高考大纲有意识培养自己的应试能力，人类一直在做的事情就是适应环境，找到在当前环境下解决问题的最优方式。 但是环境是复杂多变的，经验是抽象的，与环境的交互是有代价的。所以对于计算机来说，如何用比特流表征经验，环境和代价是一个困难的问题。 其实到这里，强化学习的概念就算是介绍完了，强化学习就是智能体实现和环境智能交互的方法。剩下的就是经验，环境以及最优如何被形式化地定义的问题。 总结一下， 1. 强化学习的最终目标是使得智能体面对复杂环境能够实现某种决策方案，使得某个目标最优。 2. 强化学习算法已知的信息只有智能体和环境交互的规则和代价。 3. 强化学习的难点在于如何表征经验，环境，定义最终目标以及智能体更新“经验”的算法。 数学表示环境和智能体整体状态的集合表示：$s \\in S$，每个状态$s$都包含环境和智能体两者的状态信息。 智能体和环境交互动作的集合表示：$a \\in A$ 智能体采取某种动作后整体状态发生变化，变化可能不确定，用概率分布表示：$Pa(s, s^{‘}) = Pr(s{t+1} = s^{‘} | s_t = s, a_t = a)$，表示时刻t智能体执行动作a后整体状态从s到$s^{‘}$的概率。 智能体和环境交互后会有一个反馈：$ra(s, s^{‘})$，表示执行动作a，整体状态从s到$s^{‘}$后，智能体得到的反馈R，我们假设这个R为标量，值越大动作策略越好。由于在状态s下执行动作a迁移到的状态不确定，所以$R_a(s) = \\sum{s^{‘}\\in S} P_a(s, s^{‘})r_a(s, s^{‘})$ 优化目标的定义：首先我们定义智能体和环境的交互策略$\\pi$，事实上$\\pi$就是我们要优化的变量，即不同环境状态下该如何选择动作。在交互策略$\\pi$下，当前状态的累计收益为 V^{\\pi}(s) = E[R] = E[\\sum_{t=t_0}^{\\inf}\\gamma^{t}r_t|s_0=s]其中$\\gamma$是衰减因子，最终的优化表达式为$V^{*}(s) = \\max_{\\pi}V^{\\pi}(s)$ q-learning由于探索环境的过程复杂，精确求解$V^{*}(s)$似乎比较困难，有人提出了q-learning算法。 所谓q-learning就是将$\\pi$用一张具有动作和状态两个维度的二维表表示，称为q。智能体处于一个状态时，衡量该状态采取不同动作得到的q值大小，以高概率选择q值大的动作和环境交互。注意q和r的区别：r只代表了当前收益，而q包含了未来的收益。每次执行过后，用如下公式更新q表， Q^{new}(s_t, a_t) \\leftarrow Q(s_t, a_t) + \\alpha (r_a(t) + \\gamma \\max_{a}Q(s_{t+1}, a) - Q(s_t, a_t))其中$\\alpha$表示学习率，值越大更新q表速度越快，q表就是智能体和环境交互的策略。这个公式不难理解，将当前的收益和未来的收益全部统计进入q表，因为未来的收益需要递归展开，而未来的收益难以确定，这里用当前q表里的$\\gamma \\max{a}Q(s{t+1}, a)$来表征未来收益，从而简化递归过程。 简单例子环境是一条长度20的赛道，终点在赛道右侧。智能体可以选择的动作为向左或向右，初始阶段智能体位于赛道最左侧，目标是达到赛道终点。 显然达到这个目标的算法非常简单，智能体直接向右走，判定走过的点是不是终点就行，但是现在智能体不会设计这样的算法，只希望尽快达到终点。假设智能体每走一步r=-0.5，达到终点r=1，我们可以令智能体在和环境交互的过程当中获得经验。 1234567891011121314151617181920212223242526def q_learning(): q_table = build_q_table(N_STATE, ACTIONS) step_counter_times = [] for episode in range(MAX_EPISODES): state = 0 is_terminal = False step_counter = 0 update_env(state, episode, step_counter) while not is_terminal: action = choose_action(state, q_table) next_state, reward = get_env_feedback(state, action) next_q = q_table.loc[state, action] if next_state == 'terminal': is_terminal = True q_target = reward else: delta = reward + GAMMA*q_table.iloc[next_state,:].max() - q_table.loc[state, action] # crucial step q_table.loc[state, action] += ALPHA*delta state = next_state is_terminal, steps = update_env(state, episode, step_counter+1) step_counter += 1 if is_terminal: step_counter_times.append(steps) return q_table, step_counter_times 这个q表大小2*20，但是足够了。首先选择动作，获得反馈后更新q表，重复此过程直到达到终点。这为一个episode，然后反复训练这个智能体更新q表，这个q表就反映了智能体获得的“经验”。 这个例子非常简单，也方便实现，但是当我们的状态数量非常多，难以用一张表表示，这该怎么办呢？ DQN待续","link":"/2021/02/24/q-learning/"},{"title":"信仰和希望","text":"观西游降魔篇有感 玄奘的信仰陈玄奘的信仰是真正的信仰。 他的信仰没有任何欲念作为回报，不断地割舍欲念反而让他的信仰更加真实和坚定。 村镇收取鱼精的经历割舍了他一丝虚荣的念头，猪刚烈的故事告诉他众生的魔念从不是水中浮萍，即使爱情对于他来说也只是一种怀念，而不是难以割舍的一部分。 所以当孙悟空打死玄奘所爱之人，问他所信的佛祖在哪之时，即使心有不甘，意气难平，玄奘仍会坚持双手合十，因为那是他的信仰，玄奘的信仰又岂会因苦难或是欲念改变呢？ 真正的信仰是不能祈求任何回报的，有了回报信仰就会变味为一种交易，这信仰简单的说，大概就是一种希望吧。 无法确定最终的结果好坏，只是朝着看到的那个可能走去，这条道路就仿若没有边际的大海，隐隐约约有一个彼岸的轮廓，可并不知道它在哪里，信者只是因为信仰其存在而朝那里走去，而不能稍有变更。 倘使有丝毫预期回报的可能，这信仰难免沦为一种谋略，最终蜕变成不择手段的夺取，甚至是光荣，也可能腐蚀信仰。没有了世人的景仰，信仰还需坚持吗？以苦海里的挣扎作为回报的投资，抑或是以荣耀作为信仰的期许，那都不是佛祖对于玄奘的期盼，更不是玄奘自己的希望。 世人的信仰陈玄奘的信仰是为众生争渡的大爱和宏愿。 我等世人怕是难以理解和拥有其宽阔的胸襟和宏愿，只是期许在某些想要放弃，容易放弃的时刻，对那些属于自己的信仰，能够再多一点点希望罢。","link":"/2021/02/09/%E4%BF%A1%E4%BB%B0%E5%92%8C%E5%B8%8C%E6%9C%9B/"},{"title":"前20周","text":"一个迟到的总结。 1月17号周日，刚好是开学后第二十周的结尾，18号，也就是第21周的开头，回到东北开启度假模式。 来南京之前，只定了两个目标，保持身体健康和发论文毕业。来到南京这140天，身体素质大概是保持住了，可惜在达成毕业条件这个事情上，有太多的诱惑使我不能保持持续的专注： 两门课分散了精力，计算复杂性和并行算法 认识了一群有趣的小伙伴，老带我玩耍 围棋和摄影总难以舍弃 没有在研究的一个方面持续投入精力 关于课程计算复杂性对于第一次上这课的印象，我只记得双手支起脑袋，努力瞪大眼睛，听到什么图灵机的符号转移之后，大概就昏昏欲睡了，然后就是下课喧闹的声音。 第一堂课确实劝退，不过我却知道了一个事实：林老师脾气不错，让我这混学分的看到了希望。同时自己心底也抱有这样的想法：毕竟也是学计算机的，要是连计算机能处理什么问题，不能处理什么问题都不能有个大概的了解，岂不是白学了？ 看得出林老师非常明白自己要讲的东西，可惜这课确实不太简单，菜鸡如我用一堂课的时间理解什么是BPP复杂度类，什么是PH复杂度类，着实不太容易。就算是对于NP问题定义里的字符串x，语言L和certificate，尽管自己能理解这个是什么意思，可对应到具体的数学语言上，我只想说不管怎么理解都不太对。转折大概是13周吧，在问了老师和徐哥很多关于概念，看起来非常幼稚的问题之后，竟发现自己不仅这些概念弄通了，连带着作业题也会做了，最后的考试林老师也非常给力，7道题都不难，顺利通关。 尽管和完成毕业论文要求的这一目标关系不大，这门课听进去还是蛮有意思的，前辈们关于什么能够计算，什么不能够计算，计算的代价等诸多问题理性而曲折的讨论，确实是计算机领域最为引人入胜的话题。 并行计算诶，一门早八的课，每次上课都难受的要死，老师讲课逻辑还挺清楚，可音调之平淡，让我一个早上犯困的人认真听100分钟，着实艰难。除此之外，这课主要关注的是并发算法的可行性，老师的博士毕业论文是关于可线性化点的（Linearizable point），找这个点可是扎扎实实的NP难问题，全靠对并发数据结构的熟悉和骤然一闪的灵感。可怜我最后竟坚持上完这课到考试，不过这本书《the art of multiprocessing programming》写的倒是有趣，其中一段关于乐观锁的比喻至今还记得。 大意是在乐观锁实现里面，每个线程可以比喻成一辆不同寻常的出租车，怎么不寻常呢？一次有位乘客坐上了这个出租，这出租从来不在红灯处停车，开的飞快无比，突然间这出租在一个绿灯处停了，乘客人傻了，问这司机是不是脑子有泡，司机告诉他：“我是怕也有像我一样的司机，一直闯红灯。” 关于这门课考试，随堂考，大概八开纸8~9页，考试那天俺还迟到5分钟，第一面送分题用了大概40分钟。艹（一种植物），想到俺还有一次作业没交（总成绩10分），心里拔凉拔凉的，还好最后算是过了。当时为啥想不开要上这门课呢，这门课大概就是自觉学得还行，可是出题比较难的那种吧。 其他至于本学期其他课程，花费精力不多：矩阵论出题非常给力，半小时交卷走人（后面那哥们一直抖腿，加上想上厕所，要不也不会这么快）；分布式系统助教师兄给分良心，Raft实验还挺有趣；物联网导论我还真没去过；嗷，对了，值得一提的还有窦老师的前沿课，金句频出，什么凌晨四点接到陈老师（可能是窦老师那个组的负责人）的微信，请窦老师点评自己的一段发言稿录音，窦老师表示只有四个字能评价：“天籁之音”，再加上窦老师那副非常真挚的面容，回想起来非常有趣。 关于课程大概就是这样了，大概以后都不会再认真上一门像计算复杂性那样的课了诶。 关于娱乐开学初去了趟围棋社，果然江苏的下棋氛围还是浓厚，本科时的朋友没有骗我。小小围棋社竟有50人余，围棋也不是只属于棋牌协会一个部门，而是单独社团，想我本科时候那得叫棋牌协会围棋部。社团内部高手也不少，随便拉个人都是5段，不知道是5段贬值了还是我变菜了hhh 浏览器主页上的第一个收藏网站就是弈客围棋，github排在第三个，有时候想去github上找点东西，随手就会打开弈客围棋，以至于观棋或是下棋忘了时间。就算在实验室，感觉后面师兄总在看着我，手也会像具有惯性似的这样做，希望在主要目标完成以前，能够适当控制自己这方面的爱好诶。 至于摄影呢，投入精力不多，但是寻找拍摄地点画的时间也不少，因为摄影也算是去了不少地方，算是比较消耗时间的爱好，之后转过去玩玩人像摄影，权当多接触人吧。 剩下的什么三国杀，狼人杀等各种桌游，还有炉石等游戏，投入的时间也不少，从10周以后，大概每周都会有1到2次。实验室的朋友们非常浪，总带我进行这类活动，下一阶段为了发论文这一最高目标，这类活动怕是要先停一停喽。 关于研究这学期最开始，认识人不多，也没有课，那真是狂读论文的日子，实验室只有我和后面三位师兄常来，最开始读的论文是infocom上的，那个理论和公式是真的多，一整7、8行的优化表达式，有些还不一定对。后来这类论文读了3篇左右，读的俺是头晕眼花，不过也算摸清这类论文的套路了。之后又开始看一些偏系统的论文，sigcomm上的居多，这论文读起来有很多东西需要查资料，可公式确实少，尽管长，可好读一些。后来又去蹭组会听，胜哥的，翘课听了组里博士讨论班，lamda组老师的，周sir的。大部分老师和和气气，不过大多思维非常敏锐，问题很犀利。 印象最深是周sir组会，组会之前有个空桌，上有精致茶具沏好的一壶茶，时间一到，周sir准时赶到，待得学生报告完之后，周sir得着自己学生先挨个提问，最后总结，语言精炼，不算很长，可总结完之后必定是要喝完一杯茶，并再高高地抬起茶壶沏满一杯，非常潇洒。 不久课程开始忙碌起来，老钱给我和zyt弄了个项目，做那个项目去嘞，这个项目可真是个坑，项目方的意思是糊弄个文档，而老钱意思是让我们挖掘问题，可这项目就是K8S套了层壳，找个锤子问题。项目方的场景是将docker容器当虚拟机使，赋予容器更强大的能力，可这就是个伪需求（画外音：那俺直接用虚拟机不行，要啥docker）。大概只有国企的领导脑子进水才会想到这种用法，而只有应付国企的z国特色乙方企业才会接这种需求。只有处于产学研（研究生生产学习）一线的俺们才会研究这个东西，好在老钱还挺够意思，年底发了些补助慰问我们，并且让我们暂停了这个东西。 项目持续大概两个半月，每周都要做一些实验、文档和汇报，分散了我的一部分精力，加上那段时间还各种浪，基本属于研究停滞的状态。这个项目让我看透了一些东西，见微知著，我大概知道z国的一些科创项目（或者说大部分？）具体是怎么回事，其实最开始还是有些失落。当然，路毕竟是人走出来的，希望还是要有的嘛。 吸取这段经历的经验，我决定先搞个跑实验比较简单，容易出活的。想想学期最开始联邦学习看的也不少，这个实验也好做，就先从这个来了，回家乡这几天主要就在干这事，当然，这些就是第20周之后的事了，休假结束再总结吧。 关于一些有趣的人和事毕竟不是日记hhh，就不具体记录了，只能说每个人的想法真是丝毫不同，尊重并尽量理解不同个体的表现和选择吧。 有些时候在一个方向研究久了，比如俺自己，计算机这方面的书看多了，不看其他方向的书，确实容易形成思维定势。想我从初中开始看的书逐渐偏向理工科，本科时看的书更少，这个假期的空闲时间是该狠狠读一波书了。","link":"/2021/01/26/%E5%89%8D20%E5%91%A8/"},{"title":"蒙特卡洛方法","text":"从复杂性角度看，围棋等棋类游戏是典型的NP-hard问题。 严格来讲，棋类问题求解属于PH问题，以围棋为例，解空间约有为$10^{250}$种可能。就算是超级计算机每秒万万亿次计算速度，即每秒能够穷举$10^{16}$种可能，相对于这么大的解空间来说也只是杯水车薪。 所以有人说如果算力足够，这个问题暴力搜索也可以，那ta显然对$10^{234}$这么多倍的差距不够了解。 MCTS原理话说回来，量变引起质变，为了解决这么大的解空间搜索问题，一种随机性的策略被提出来了——Mento Carlo Tree Search。当然，这和蒙特卡洛方法是不一样的，蒙特卡洛树搜索是将蒙特卡洛方法中的随机性引入到搜索树当中。有关文献也将这棵搜索树称为博弈树，因为对于棋类游戏，对弈方的目标是正好相反的。 所以，MCTS算法本质上树的搜索算法，输入是当前局面状态，输出是可能的最优解。 如果你意图使用暴力搜索的方法，只需遍历这棵搜索树，穷举所有可能，思路自然非常简答，但是解空间规模不允许你这样做。MCTS在搜索这棵树的时候引入了随机性。 回想我们下棋的方式，通常是脑海中出现几个可用的选点，对比这些选点的对于局势的影响，选择其中最有利的选点。 对于暴力搜索有两个难点： 1. 如何找到可用选点？ 2. 如何确定这些选点的相对好坏？ 先讨论第二个问题，对于人类来讲，确定选点的好坏往往需要递归的进行这样的思考，直到人类可以“显而易见”看出某个局面的好坏。然而对于机器来来说，这个显而易见就不是那么好定义，为了处理这个“显而易见”，MCTS的方式是对于当前选点，随机选取n个可能对局，以胜的概率来表示这个点的好坏。 对于第一个问题，如何找到可用选点呢，有经验的人类棋手凭借“棋感”直接找到直接能够找到几个看起来不错的点，机器却没有棋感，对于这点，机器通过随机生成多次对局，在每次对局中被访问到的次数比较多的节点，被认为是较优的选点。 MCTS实现那么在实现MCTS过程中，如何对外暴露接口和构造搜索树呢？ 我们以五子棋为例，探讨这一过程。 1234567891011121314class MCTS(): # ... def play(self, row:int, column:int, board_state:list): '''AI exposed interface''' board = Board(row, column) board.set_state(board_state) for n in range(self.playout_num): board_copy = copy.deepcopy(board) self._playout(board_copy) move = max(self.root.children.items(), key=lambda a: a[1].visited_num)[0] x, y = board.interger_to_coordinate(move) return x, y MCTS对外暴露的接口是拿到一个局面状态之后，返回推荐选点。 在这一步中，MCTS通过模拟一定次数的对局，以当前节点为根节点构造搜索树，然后查找搜索树中访问次数最多的二代子节点即可。 在每次对局当中，我们需要进行节点选择和评估，节点选择也是构造整个搜索树的过程，每次对局如果没有结束，就会以某一形式扩展当前节点。 在这个naive的实现当中，我们是直接扩展所有没有被棋子占据的节点。 12345678910111213141516class MCTS(): # ... def _playout(self, board: Board): node = self.root while(True): if node.is_leaf(): break action, node = self._select_best(node) board.move(action) action_probs, _ = self._policy(board) end, winner = board.who_win() if not end: self._expand(node, action_probs) leaf_value = self._evaluate_rollout(board) self._update_recursive(node, -leaf_value) 当扩展完当前节点之后，如果该到该节点游戏没有结束，为了避免无穷尽地递归搜索，需要评判该节点局面好坏，这部分通过在该节点内随机选点下棋实现。 123456789101112131415class MCTS(): # ... def _evaluate_rollout(self, board, limit=100): '''return -1 or 0 or 1''' player = board.get_cur_player() for i in range(limit): end, winner = board.who_win() if end: break action_probs = self._rollout_policy(board) max_action = max(action_probs, key=itemgetter(1))[0] board.move(max_action) else: print(&quot;tuoshi&quot;) return winner 如此我们实现了基本MCTS的功能，即给定局面，返回推荐值。 总结一下，在这个过程中，关键是构造搜索树，通过模拟在当前状态之后的多次对局实现。在模拟的过程当中，一边添加叶节点，一边通过随机对局更改叶节点和祖先节点的评估值，每个叶节点对应一个棋盘状态。当多次对局完成之后，选择搜索树中二代节点评价最高的节点。 总结MCTS并不难，基本思想就是通过多次随机模拟对局实现局面评估，从而降低将所有叶节点展开带来的巨大时空复杂度。 但是有个坏处，每次对局重新开始后，都需要通过模拟进行判断，过去下的每盘棋的经验无法被保留。自2006年MCTS被用来作为棋类求解算法以来，对于MCTS有许多基于特定游戏规则的选择策略改进，但都只是实现了人类知识的迁移，而没有自我改进这一过程，而2015年alphago横空出世，将神经网络算法引入围棋游戏，利用神经网络判定局势，给围棋这一古老游戏带来了新的变化。","link":"/2021/02/14/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95/"},{"title":"Octo INT8 training","text":"Octo: INT8 Training with Loss-aware Compensation and Backward Quantization for Tiny On-device Learning (ATC 2021) 背景：系统，单设备，边缘+训练+量化。思路亮点：引入LAC+PRC。系统亮点：低依赖，只需python基本库。 研究背景边缘端高效模型训练是实现边缘智能的关键环节。已有研究对边缘端数据收集和推理加速进行了深入探讨，其中量化（即将神经网络模型中的参数权重从FP32转为低精度格式数据，从而实现存储和计算开销降低的方法）是数据中心实现高效模型推理和训练的一种有效方案。 研究问题但是目前将已有的模型量化方法应用到轻量级设备模型训练存在四个问题 部分研究工作适用于推理场景，不适用模型训练； 部分研究工作只适用特殊网络结构，因为采用了极低比特设计（比如4bit存储）； 不能够在训练阶段实现硬件层面实际加速（理论可以，实际不行）； 没有对训练阶段算法做充分优化，无法适应低资源设备。 总之，已有的模型量化方法可适用在边缘端推理，或者理论上可行，但是实际不适用边缘端模型训练加速。因此要设计一种能够实际应用在边缘侧的模型训练的量化加速方案。 系统设计中的挑战和思路 如何充分利用硬件算力以及保证在不同边缘的通用性？（设计） 将统一的8位量化引入卷积运算、仿射模块、激活函数和梯度计算。数据量化涵盖前向和后向传递，因此可以加速整个迭代。卷积模块、仿射模块均基于numpy库编写，确保通用性。 量化会降低前向计算和后向计算的精度，如何保证精度降低范围可接受？（精度） 通过整体调整前向和后向传递的中间结果来保持模型的准确性。在前向传递中，提出了损失感知补偿(LAC)方法并设计了一个新的神经网络组件，称为补偿层，以填补量化张量算法引起的误差差距。补偿层内部的参数根据网络损失进行优化，为了提高更新效率，引入了补偿参数的L2正则化项。在反向传播中，提出了参数化范围裁剪(PRC)方法来限制量化梯度的变换域。 引入新的层是否会带来额外计算开销，从而抵消量化带来的性能优化？（系统开销） 以INT8格式保留所有参数和中间导数。可以有效地减少了峰值内存占用并节省了访问参数缓存的存储成本。对于上一个问题中提到的LAC和PRC可能会产生额外的开销，将补偿项从使用FP32张量的更高次多项式转换为仅依赖于卷积层输出的仿射运算，从而限制补偿和裁剪的计算成本。 前向LAC层和后向PRC方法量化误差（补偿）表达式： 补偿层设计代码： 123456789101112131415class Compensation: def __init__(self, alpha, mu, offset, enable_compensation_clipping=False, layer_id='Compensation'): ... def forward(self, x): out = x + self.alpha * self.mu + self.offset self.fp_out_before_clipping = out if self.enable_compensation_clipping: out = self.parametrized_range_clipping(out) return out def backward(self, dout): ... 含有误差$L_2$范数正则项的损失函数 在执行反向传播过程中，最终优化的目标函数变更为上式。 在后向传播过程当中，也可以使用梯度量化的方法，因为梯度也可以抽象为向量点积，遵循链式法则。但是后向传播计算梯度过程不能通过添加补偿层的方法降低量化误差。为了降低梯度的量化误差，关键在于降低零点偏移，通过对具有不同数值分布的张量确定不同量化范围，从而使零点偏移降低。并根据张量的数值分布通常呈钟形这一特点，启发性地将量化范围缩小为原来的0.95。 123456789def parametrized_range_clipping(self, tensor, z=2.576): n = tensor.size if n == 0: return tensor self.clip_max = 0.95 * np.max(tensor) self.clip_min = 0.95 * np.min(tensor) return np.clip(tensor, self.clip_min, self.clip_max) 复现和思考 由于基于numpy库编写，能够实现不同边缘平台的推理和训练，通用性可以保证。 实验数据集为MNIST，CIFAR10小数据集，完成任务是图片分类，属于比较简单的机器学习任务。代码支持的算子主要是卷积、仿射和部分激活函数。比较的基线是基于其自身框架实现的量化算法。可以考虑根据该库添加不同算子，实现不同模型，或者进一步改进其性能。 目前能够在GPU和NPU上顺利运行，对于不同平台支持的优化方案比较还需要进一步验证。","link":"/2021/09/29/Octo-INT8-training/"},{"title":"MEC中的任务卸载和资源管理研究","text":"北邮田辉2019年毕业学生的博士论文，题目是移动边缘计算中的任务卸载和资源管理研究。 论文结构论文整体研究对象如标题所阐述。 第二章讨论动态移动边缘计算环境中用户任务迁移问题，分别针对单用户多边缘和多用户协作场景进行优化，并通过时域滚动控制和Lyapunov优化技术设计在线优化方案，减少系统能耗，提升系统吞吐量 第三章研究MEC单小区（一个边缘服务器）资源管理问题。分别针对普通移动应用、时延敏感任务，以及海量设备连接物联网场景进行优化。具体地，针对普通移动应用，提出了均衡任务计算时延与处理能耗的效用函数，并结合凸优化、准凸优化和次模优化技术，对任务卸载决策、无线资源管理和计算资源分配进行联合优化；针对时延敏感任务，提出了基于量化动态规划技术的接入控制和资源分配联合优化方案；针对海量设备连接物联网场景，提出了基于加扰Lyapunov优化技术的物联网边缘计算在线资源调度方案，最大化系统效用。 第四章研究了移动边缘计算服务器分布式组网资源管理问题，分别针对大规模边缘计算和分布式机器学习的边缘计算组网资源管理进行优化。具体地，针对大规模边缘计算组网资源管理，提出了大规模边缘计算资源管理和协作域划分的分布式优化方案，在未知网络随机特性的情况下最小化时间平均系统开销，并通过协作域限制任务卸载范围，保证大规模网络边缘计算性能；针对分布式机器学习的边缘计算组网资源管理，设计了针对分布式机器学习的数据均匀度指标，并提出了数据接入、分配和处理在线优化方案，在保证网络稳定条件下，最大化分布式机器学习系统效益。 动态移动边缘计算环境中的用户任务迁移问题待续","link":"/2021/10/05/MEC%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E5%8D%B8%E8%BD%BD%E5%92%8C%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E7%A0%94%E7%A9%B6/"},{"title":"nn-Meter","text":"nn-Meter: Towards Accurate Latency Prediction of Deep-Learning Model Inference on Diverse Edge Devices (Mobisys 2021 Best paper) 背景：理论，单设备，边缘+推理+推理时间预测。思路亮点：找融合算子，测融合算子运行时间，指出算子计算时延和算子配置存在非线性关系。 研究背景边缘端实现高效模型推理是实现边缘智能的关键环节。推理延迟成为各类移动端和边缘设备上衡量DNN推理模型是否高效的关键指标，如何准确预测推理延迟是设计各类高效神经网络的关键问题。 研究问题但是目前预测神经网络模型推理延迟存在以下几个问题： 对于不同的边缘设备（例如，移动CPU/GPU和各种AI加速器）和不同的推理框架（例如，TFLite和OpenVINO），工程量是巨大的。即使在单个设备上，测量NAS任务中的大量模型也可能非常耗时，在实际工作中基于测量的方法不可行。 基于FLOPs的预测方法被广泛应用，这是一种简单的方法，但并不是延迟的直接度量，因为底层硬件可能存在的各类并行优化使得此类方法不准确。 基于神经网络基本操作符的推理延迟预测不考虑计算图的运行时操作符融合优化，从而导致模型延迟差异。 基于图形卷积网络（GCN）预测各种设备上NASBench201数据集的延迟是最近出现的工作，但是这种基于模型图的方法很大程度上依赖于已测试的模型结构，可能不适用于许多看不见的模型结构。 总之，已有工作或者在实际中不可行，或者没有考虑底层各类运行时优化，或者对未知模型缺乏预测理论依据，因此需要建立一种适用于边缘设备底层算子融合优化，具有理论依据的推理延迟准确预测工具。 算法设计的思路和挑战下图系统框架展示了实现DNN模型精确延迟预测的两个核心组件：内核检测和自适应数据采样。从概念上讲，前者自动将目标模型划分为一组内核，后者从大空间中采样最有利的配置，以构建准确的内核级延迟预测器。然后，对于每个内核，提取特征并预测延迟。 内核检测。 它包括精心设计的测试用例来检测两个算子之间的融合规则（融合后即内核），以及一个搜索模型中所有核的算法。通过离线收集所有的融合规则，对于在线模型预测，核搜索算法递归地将这些规则应用于目标模型以查找所有核。 寻找包含融合规则的核有两个难点：许多推理后端是闭源代码，无法从源代码中获得内核；另外CNN模型任意，为了支持模型推理时间预测，检测融合规则方法应该独立于特定模型图。 自适应数据采样。 受限离线为目标设备上的所有内核构建基于机器学习的时延预测器。对于每个内核，它通过一个迭代的采样过程来采样最有益的配置(h,w,cin,cout,stride,k)。采样器从先验可能性分布中采样，该分布描述了模型CNN设计中考虑的内核配置。我们设计了一个测试集来评估采样数据的质量，对于预测误差较大的数据，在其周围执行细粒度通道数采样。 造成误差较大的原因是部分操作符的推理时延和一些参数并不是简单的线性模式，而是阶跃式函数，这种非线性反映了硬件优化的复杂性。 融合规则检测判据和算子配置方法由于融合通过将同一元素上的计算连接在一起，从而减少了延迟，因此使用连接和分离运算符的运行时间差作为判断是否发生融合的度量。也就是说，对于两个操作符op1和op2，如果操作符的时间遵循下式，则它们被视为被融合为Op1++Op2。 然后从计算图的根节点遍历整张图，依次根据此判据判定不同算符是否有融合规则。 如以上两张图所示，如果直接随机采样会忽略许多关键数据，拟合得到的预测结果不准确。由于算子配置在样本空间中呈现非均匀分布（一些极端情况的采样实际不会用到），首先采用剪枝将这类情况排除，然后运行一个迭代过程来围绕不准确的预测数据采样得到更多的数据，直到预测精度满足要求。对于非线性数据关系，采用随机森林为每个内核构建推理实验预测器。 最终所有内核的预测推理时延求和就是一个模型的推理时延。 复现和思考没有复现，原因有二：首先对一个模型进行精准预测，和调度关系不是很大，可以作为调度的支撑，但不是主线；其次代码依赖较多，复现需要耗费时间较长。 另外这篇文章首先扩大问题规模说明推理延迟预测算法的必要性，然后在方法阶段提出用剪枝剪去现实中不存在的可能性，有些离谱。 不过收集数据集不容易，工作量还是有的。","link":"/2021/10/10/nn-Meter/"},{"title":"heterogeneous IoT","text":"几篇关于边缘集群调度的论文，一起总结一下。 DeepThings: Distributed Adaptive Deep Learning Inference on Resource-Constrained IoT Edge Clusters(TCADICS 2018) Adaptive Parallel Execution of Deep Neural Networks on Heterogeneous Edge Devices(SEC 2019) DeepSlicing: Collaborative and Adaptive CNN Inference With Low Latency(TPDS 2020) Towards Efficient Inference: Adaptively Cooperate in Heterogeneous IoT Edge Cluster(ICDCS 2021) 背景：集群调度框架或算法，边缘+层级粒度+水平或纵向划分。 研究背景边缘设备计算资源有限，无法支持来自多台终端的多个模型在时延限制内完成推理任务。在具有并行能力的边缘集群执行这些推理任务是一种流行的解决方案。如何设计一种有时延保障的面向边缘集群的推理模型调度方案是实现终端多模型高效协同推理的关键环节。 系统框架DeepThings(TCAD 2018) 在具有轻量级内存资源的物联网边缘集群上分块执行各卷积层。针对早期卷积层的内存占用问题，将原始CNN层堆栈分割成独立可分配的执行单元，每个执行单元在每个物联网设备内具有更小的内存占用和最大的内存重用。同时根据集群内节点处理这些小分区的进度，动态平衡边缘集群节点之间的工作负载，实现在时变处理需求下边缘集群的分布式CNN推理。 DeepSlicing(TPDS 2020) 延续了DeepThings的工作，在系统设计上支持具有DAG结构的CNN模型的定制化划分加速，同时为用户提供了一组API，用于获取实时任务状态和数据位置、执行细粒度调度和及时回收内存，从而为用户提供了定制自己的调度策略的能力。 调度算法Adaptive Parallel Execution of DNNs(SEC 2019) 针对边缘集群的通信开销问题，提出一种自适应权衡跨层融合和层内分区的动态规划算法，根据异构边缘的计算能力和网络条件决定DNN模型的最佳分区和并行化方法。 Towards Efficient Inference(ICDCS 2021) 提出了一种用于在异构物联网边缘集群上进行CNN推理的流水线合作方案(PICO)，并设计一种基于动态规划的算法在最大时延约束和动态工作负载条件下，最大化吞吐量的最佳并行策略。 流水线模型在最大时延限制下，寻找并行方案优化最大吞吐量的建模方式","link":"/2021/10/12/Edge-Cluster/"},{"title":"VideoStorm","text":"Live Video Analytics at Scale with Approximation and Delay-Tolerance(NSDI 2017) 背景：集群+视频流业务+用户服务质量侧写。思路亮点：提出服务质量侧写概念，打点视频流配置和QoS的关系，找到帕累托最优分界线，根据延迟和QoS确定视频流的配置。 研究背景集群，无论部署位置是在边缘或者云端，都会面临任务需求和集群能够提供的服务能力不匹配的情况。当发生需求（总任务量）超过供给（集群的资源）时，有三类解决方案： 提升供给效率：改善集群内部资源分配方案，采用并发或流水线等方案充分利用集群内所有硬件的运算能力，避免集群内有硬件空转或产生通信等额外开销。 降低需求总量：将超出的任务量卸载至其他节点进行计算，比如计算卸载，服务迁移，云边协同等方案。 改善需求质量：即对于某些需求，资源消耗对于服务质量的提升有边际效应，因此可以在不大幅降低服务质量的情况下实现资源消耗的大幅降低。 对于第三点，如何找到特定的业务，以及为此类业务的服务质量和任务资源配置找到一个确定的数值关系，是改善需求质量的关键环节，本文就视频流分析业务给出一种基于侧写的任务资源配置方案。 研究问题减载（load shedding）是流处理系统研究中关注的一个问题。相对于以往文献，这篇文章是针对视频流这一特定业务的减载开篇之作。新的贡献主要有两方面： 将多视频流查询的服务质量和延迟一起考虑 采用侧写的方式刻画视频流资源配置和服务质量关系 问题建模资源需求和视频分析效果的侧写如下图所示，每一个点代表着一个配置和一个效果的对应关系。 资源需求的定义是广义的，这里采用使用的cpu内核数，对于一些具体硬件其资源需求有区别。影响资源需求的业务配置取决于具体业务，在视频流服务当中，业务配置可以是视频的码率和采样率。即较低的视频码率可以带来较高的视频流分析效果，从而可以以较小的视频流分析效果下降为代价换取资源消耗的大幅减少。 图中的最左侧曲线是帕累托最优分界线，即应尽可能使用该分界线上的配置。如何确定这条曲线和根据profiling结果分配集群资源呢？ 首先定义效用函数，效用函数和视频流分析的服务质量和延迟有关： 因为调整的滞后性，当前要调整的是T时刻之后的效用，T时刻后时延为： 根据效用和资源限制形式化问题，满足效用约束和资源总量约束 算法设计和挑战先离线进行profiling。线上阶段因为总共有k个查询需要处理，按照贪心的思路，首先改进最坏的查询，调整方式为小步增加其资源消耗，直到达到profiling点，当在运行阶段发现有更好的profiling时（低资源需求，高效用，和视频流内容有关），更新配置信息。 思考改善需求质量提升集群服务效率的挖坑之作。换各种方法profiling的后续之作层出不穷，也启发了后续针对其他业务的profiling方案。","link":"/2021/10/26/VideoStorm/"},{"title":"Gradient Descent","text":"梯度下降如何应用在神经网络训练中? 背景现实世界中的诸多任务可以被抽象成一个接收一定形式的输入，并产生某种类型输出的函数。然而对于现实世界中的大部分任务，其函数关系复杂且普遍具有非线性关系，无法轻松找到这样的函数。 神经网络算法的目的就是通过神经网络结构表征任务的非线性特征，并通过已有数据集产生神经网络参数，从而拟合现实世界任务对应的函数，这个函数可以被表示为 其中$structure$表示神经网络的结构，该结构是神经网络拟合现实任务非线性特征的关键，通常情况下是先验的，需要研究人员精心设计得到，比如transformer和conv结构。 $X,Y$表示数据集中的输入和输出，参数$w$是神经网络参数。在模型获取阶段（训练），我们能够同时拿到数据集的输入和输出$X,Y$，并希望得到神经网络参数$w$；在模型应用阶段（推理），我们只拿到数据集中的$X$（输入数据），希望得到和真实世界任务尽可能相近的结果$Y$。 问题和梯度下降方法在模型推理阶段中，由于我们已经得到了神经网络参数$w$，获得结果的过程是一个前向计算的过程，按步骤执行即可。 而在模型训练阶段，神经网络参数$w$是未知的，而函数$O(X)$的输出是已知的，由于神经网络参数$w$通常是高维向量，数据集$X,Y$同样具有一定规模，这相当于是在近似求解一个高维方程，这个问题通常是难解的，因此需要梯度下降，也就是反向传播过程。 将近似求解高维方程的问题转化为最小化loss函数的问题，令 在反向传播过程当中，由于数据集中的输入和输出都是已知的，即让该函数最小即可，根据优化理论，按照下式不断迭代，直到loss函数的变化小于某阈值即可。 一些难点这里讨论一些梯度下降方法中确保准确率的一些难点。 关于数据集：由于数据集是通过实践获得的，只有统计意义上的理论保证。所以在每一轮迭代过程中如何选取数据集，如何保证数据集之间的偏差在一定范围内？ 关于神经网络结构：由于神经网络的层状结构，存在梯度消失，梯度精度等问题","link":"/2021/11/08/Gradient-Descent/"},{"title":"每日论文","text":"1.只要把东西做出来，就会有和别人不一样的地方； 2.永远不要停止读论文。 12-09Energy‑effective artificial internet‑of‑things application deployment in edge‑cloud systems (邓水光) 背景：云端边协同系统+任务卸载+DAG图建模。 亮点1：给出了一个具有DAG结构的AI任务例子，用来预测用户点击率的推荐算法DeepFM的结构。 亮点2：具有DAG结构的AI任务卸载的架构图。 TODO：关于DAG图的数学建模方法。 12-10Online Social Welfare Maximization with Spatio-Temporal Resource Mesh for Serverless (赵银亮)、 无服务器时空资源网格的在线社会福利最大化 背景：无服务器+集群+时空网格资源分配+社会福利模型 亮点1：用时空资源网格表述集群中的流水线任务调度 亮点2：社会福利模型，即同时考虑供给侧和需求侧，对于集群来说，就是既要最优化QoS，又要使得集群的资源利用率最高。 TODO：时空资源网格式的数学描述，以及社会福利模型的对应算法和收敛界证明。 TODO：关于Serverless概念和在边缘计算中应用的探讨，Cloud programming simplified: A berkeley view on serverless computing 12-11SDTP: Accelerating Wide-Area Data Analytics with Simultaneous Data Transfer and Processing (吴杰，TCC) 为了有效分析跨地域分布式数据流，云提供商在地理分布式站点（例如，数据中心、边缘集群和终端）之间实施数据并行作业，这些站点通常通过广域网链接互连。此文针对跨地域数据并行执行方法需要在每个阶段完成传输和计算时进行等待产生的瓶颈，提出了一种同时考虑网络带宽动态和作业并行性的同部数据传输和处理机制来加速广域数据分析。 背景：跨域数据分析+MapReduce作业流程 Mu: An Efficient, Fair and Responsive Serverless Framework for Resource-Constrained Edge Clouds 背景：系统，边缘云+无服务器架构。考虑可扩展性，集群内部资源利用率。 Edge computing for cyber-physical systems: A systematic mapping study emphasizing trustworthiness 背景：调研，边缘计算+安全（可信性）。关于安全性的论文研究内容的横向对比。 12-14Cupy: A NumPy-Compatible Library for NVIDIA GPU Calculations (NIPs’ 2017) 背景： 一个面向GPU计算，具有与numpy相似接口的python数学运算库开发和使用报告，用户可以自定义两类Cuda核操作，针对元素单体的操作和reduce操作。可以用做一些深度学习框架的后端。 12-15multi-fiedlity information fusion with concatenated neural networks (arxiv’ 21.04) 背景：工程领域问题模型构建。亮点：神经网络 + 物理模型先验知识。 计算建模已转向使用统计推理、深度学习和其他数据驱动的建模框架。尽管这种建模转变通过降低计算负担在设计优化和实时控制等许多应用中大有可为，但训练深度学习模型需要大量数据。这些大数据并不总是可用于解决科学问题，并导致数据驱动模型的泛化性较差。这种差距可以通过利用基于物理模型的信息来弥补，这篇论文利用研究问题的先验知识，提出了一种串联神经网络方法，以构建更量身定制、更有效和更高效的机器学习模型。在不失去其普遍性和模块化的情况下，这篇文章专注于层流和湍流边界层流预测模型的开发。 这项工作将自相似解和幂律速度分布（低保真模型）与通过级联神经网络从实验或计算流体动力学模拟（高保真模型）获得的噪声数据相结合。并说明了来自这些简化模型的知识如何减少与应用于边界层流预测问题的深度学习模型相关的不确定性。所提出的多保真信息融合框架产生了物理上一致的模型，这些模型试图比纯粹基于数据获得的数据驱动模型实现更好的泛化。虽然这篇文章针对与流体力学相关的问题展示了应用于特定问题的框架，但其工作流程和原则可用于许多普遍存在经验、分析或简化模型的科学问题。根据新的物理引导的机器学习原理的巨大需求，这项工作在广泛的基于物理的理论和数据驱动的建模范式之间架起了一座桥梁，并为将混合物理和机器学习建模方法用于下一代数字孪生铺平了道路。 Elf: Accelerate High-resolution Mobile Deep Vision with Content-aware Parallel Offloading (Mobicom 2021) 背景：边缘 + 视频流处理 + 部分任务卸载 + 内容感知。亮点：用LSTM预测需要卸载的图像区域，降低检测开销。 Towards General Deep Leakage in Federated Learning (arxiv’ 21.10) 背景：联邦学习 + 攻击者原始数据重构。亮点：零标签恢复原始图像数据。 12-16You Only Look Once: Unified, Real-Time Object Detection (arxiv’ 15.06) 背景：CV + 目标检测。 Yolov1是针对目标检测算法fast-rcnn的两阶段检测-分类过程中速度过慢的痛点所提出来的目标检测算法。其全部由卷积层和全连接层构成，为了实现这样的一阶段检测+分类过程，Yolo将整个网络划分为SxS个网格。当有物体中心落在该网格中时，Yolo网络对其进行分类，其对应全连接层的输出包含三个部分，中心位置横纵坐标，检测框的长宽，位置置信概率IOU以及每一种分类对应的置信概率；当没有物体中心落在该网格中，对应的全连接层部分输出为0。 这样的网络结构如何进行训练呢？Yolo将不同的预测指标loss加权求和作为总体的loss并进行训练。 红框部分表示物体的坐标损失，因为大部分情况物体不一定处在指定网格中，因此其权重较高，为什么中心点没有取方根均方误差，而长宽取方根均方误差呢？这是因为当使用均方误差时，当loss相等，可能有两种情况：预测的比真实的大，或者预测的比真实的小。我们希望面积比值较大时，即预测值比真实值面积小时，其loss越大，因此需要用方根均方误差。黄色框部分是包含物体时和不包含物体时的置信概率loss，因为大部分情况网格里没有预测物体，因此我们希望不包含物体时权重较小，否则一样的权重会导致网络倾向于判断网格没有物体，因此该项权重设置较小。最后蓝色框里的loss表示分类误差。 12-18Characterizing the I/O Pipeline in the Deployment of CNNs on Commercial Accelerators (ISPA’ 2020) 商用AI加速器因其在深度神经网络（DNN）推理方面的高能效而越来越受欢迎。如何对它们进行基准测试仍然是热门的研究课题。现有的表征研究主要集中在硬件执行延迟上，而没有考虑在端到端推理中很重要的预处理或后处理以及拷入或拷出开销。受此启发，本文使用五阶段I/O管道对商业DNN加速器的端到端推理阶段进行建模，包括预处理、复制、硬件执行、复制和后处理阶段。我们进一步研究了每个阶段的涉及因素，并在三个不同的硬件平台上实现了整个I/O管道，涵盖了新兴的DNN加速器和传统的CPU和GPU。使用来自真实世界计算机视觉应用程序的六个DNN，我们深入研究DNN推理流水线并量化每个阶段对吞吐量的影响。本文实验结果证明了这种I/O管道的效果，并强调了端到端评估的必要性。 12-20Attention Is All You Need (NIPs’ 2017) 背景：NLP + 自注意力机制。完全利用注意力机制实现自然语言处理系列任务。对于输入句子的相对位置关系使用一种正弦函数和余弦函数的先验编码方式。 BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding (arxiv’ 2018) 背景：NLP + 自注意力编码结构堆叠。通过预训练得到句子的特征向量表示，然后通过微调的方法处理不同的下游自然语言处理任务。有两种预训练方式，一是句子间关系判断，这是有标签的数据集，二是句子内挖掉一个词，然后填空，这是无监督学习。 除了token和position，type和mask也需要在训练时输入，用来表示句子内关系和句子间关系。 12-21Adaptive Anomaly Detection for Internet of Things in Hierarchical Edge Computing: A Contextual-Bandit Approach (TOIT’ 2021) 背景：分层式边缘网络结构 + 异常检测应用。 深度神经网络（DNN）的进步显着增强了物联网应用中异常数据的实时检测。然而，复杂度-准确度-延迟的困境依然存在：复杂的DNN模型提供了更高的准确度，但典型的物联网设备几乎无法承受计算负载，而将负载卸载到云端的补救措施会导致长时间的延迟。这篇文章通过提出具有分层边缘计算（HEC）的自适应异常检测方案来应对这一挑战，具体来说，首先构建多个复杂度不断增加的异常检测DNN模型，并将它们中的每一个与相应的HEC层相关联，然后设计了一个自适应模型选择方案，该方案被表述为上下文老虎机问题，并通过使用强化学习策略网络来解决。 异常检测与目标检测任务类似，是一个很大的分类，根据数据类型和异常类型的不同有多种检测方法和模型。 12-23Learned TPU Cost Model for XLA Tensor Programs (NIPs’ 2019) 谷歌公司希望开发一种成本模型，可以准确估计在张量处理单元（TPU）上运行的机器学习模型执行时间。编译器可以用这样的模型做出启发式决策，寻找特定程序的最佳配置，但是由于现代处理器的复杂性，构建准确的成本分析模型有挑战性。本文利用神经网络预测执行时间。 成本模型对于在编译器优化代码和手动优化程序很有用。例如，编译器后端LLVM的循环向量化器使用成本模型来计算最佳向量化因子和展开因子，而GCC的自动向量化器使用成本模型来决定何时应用循环剥离、循环版本控制、外循环矢量化和迭代内矢量化。更准确的成本模型通常会导致更好的优化决策。此外，可以在编译器的自动调谐器（autotuner）中使用成本模型，作为在真实硬件上生成和运行代码的更快替代方法。对于基于神经网络的推理模型来说，神经架构搜索也可以使用成本模型找到满足目标精度的最快模型，反之亦然。 目前在谷歌已经使用的自动调谐器XLA需要在真实机器上运行一次后得到真实执行时间，对于大型模型来说，跑一次测试太过耗时，因此需要比较准确的预估方法。考虑到现代处理器的设计复杂，手动设计成本设计模型需要考虑的因素过多，因此这篇文章采用的是将一个神经网络程序建模成图，根据图的特点利用神经网络推断其执行时间。 XLA是TensorFlow的编译器，适用于各种硬件目标，包括CPU、GPU、TPU和其他自定义加速器。一个TensorFlow图程序可以被翻译成一个XLA图程序，它是XLA编译器的输入。XLA程序由称为计算的基本块组成。每个计算都由称为计算图的有向无环图表示。计算图中的节点表示张量操作，将一个或多个输入张量处理为输出张量。边将一个节点的输出张量连接到另一个节点的输入张量。 XLA编译器执行诸如张量布局分配、操作融合和操作调度等优化。在优化之前，计算图中的节点是单个原始张量操作。经过优化，一个节点要么是单个原语操作，要么是融合操作（多个原语操作的融合）。在这篇文章中，将优化计算图中的节点称为核算子（kernel）。一个TPU一次执行一个核算子，分别在启动和终止时读取和写入主存；两个核算子之间的执行没有重叠。因此，计算图的执行时间是所有核算子的执行时间的总和，可能会有一些小例外。 上图描述了用于预测核算子执行时间的成本模型架构。从操作码，操作特征（张量维度，张量布局，算子特征），和邻接矩阵中捕获到的核算子链接预测执行时间。对于操作码和操作特征的编码采用线性方式，然后使用一层前馈层和graphsgae的方法生成图结构的嵌入表示（graph embedding）。 12-27AI Accelerator Survey and Trends (arxiv’ 2021) 在过去几年中，每月都会发布新的机器学习加速器，用于语音识别、视频对象检测、辅助驾驶和许多数据中心应用。这篇文章是对过去两年人工智能加速器和处理器的调查。此文收集和总结了目前已公开发布的具有峰值性能和功耗数字的商用加速器，并将性能和功率值绘制在散点图上，并再次讨论和分析该图上趋势的一些维度和观察结果。同时也编制了一份基准性能结果列表，并计算了与峰值性能相关的计算效率。 近年来，许多公司一直在报告其芯片、卡和系统的实际性能数据。他们一直在各种基准的背景下这样做，包括MLPerf。大多数基准测试结果都是用于推断的，其中度量是吞吐量即每秒图像/项目数。也有一些培训基准结果，其中指标是培训特定DNN模型的推理时间。此外，这篇文章也重点关注延迟限制内的每秒图像吞吐量，当前的国防和国家安全应用程序通常优先考虑吞吐量，因为来自传感器平台的图像/项目以一致的流收集。 他的表格报告了主导推理（正向传递）计算的fused-multiply-add（FMA）操作的数量。然而，FMA操作只是所有计算和数据运动的近似值。上按每秒图像数（IPS）排序，底部有四个Google条目。谷歌报告了八个使用率最高的模型的平均计算效率结果。几乎所有的加速器都达到了20%以上的计算效率；通常在具有相当高运算强度的密集计算内核上实现10%的计算效率是一项挑战。考虑到这些具有宽数据传输路径的ML加速器的高度并行设计，可以合理预期，进一步的调整和优化将使用包括战略性数据布局和数据传输延迟隐藏在内的技术使这些加速器的利用率提高20%以上。另外，技术类型、精度或应用程序类别与计算利用率之间似乎没有相关性。","link":"/2021/12/09/%E6%AF%8F%E6%97%A5%E8%AE%BA%E6%96%87/"},{"title":"2022-paper","text":"1.只要把东西做出来，就会有和别人不一样的地方； 2.永远不要停止读论文。 01-09 承蒙伟哥厚爱，以后无论再忙每天看论文做笔记的时间还是要有的。","link":"/2022/01/01/2022-paper/"},{"title":"DOTA","text":"无意间看到了一些DOTA英雄的英文名，中文翻译属实有想象力，堪比将《Waterloo Bridge》翻译成《魂断蓝桥》。相比war3引擎上的dota，dota2上的英雄名称没有那么亲切。 DOTA: Defense Of The Ancients想象力评级不代表准确度评级。 英文名 直译 中文名 想象力等级 Abaddon 魔鬼 亚巴顿 1 Alchemist 炼金术士 炼金术士 0 Ancient Apparition 古老的 幽灵 远古冰魄 3 Anti-Mage 反对-魔法师 敌法师 2 Arc-Warden 弧光-领主 弧光守望者；天穹守望者 2 Axe 斧头 斧王 3 Bane 鸩毒 祸乱之源 4 BatRider 蝙蝠 骑手 蝙蝠骑士 1 BeastMaster 野兽 主宰 兽王 2 BloodSeeker 血液 寻找者 嗜血狂魔 4 BountyHunter 赏金 猎人 赏金猎人 0 BrewMaster 啤酒 主宰 熊猫酒仙；酿酒大师 3 BristleBack 刚毛 背部 刚背兽 4 BroodMother 孕育 母亲 育母蜘蛛 5 CentaurWarRunner 半人马 战争 行者 半人马战行者 1 ChaosKnight 混沌 骑士 混沌骑士 0 Chen 陈 陈；圣骑士 1 Clinkz 克林克兹 骷髅射手 4 Clockwerk 发条 发条地精；发条技师 3 CrystalMaiden 结晶 女仆 水晶室女 3 DarkSeer 黑暗 预言者 黑暗贤者 2 DarkWillow 黑暗 柳条 邪影芳灵（新） 3 DawnBreaker 黎明 断路器 破晓晨星（新） 3 Dazzle 炫目 戴泽 1 DeathProphet 死亡 先知 死亡先知 0 Disruptor 干扰者 干扰者（新） 0 Doom 厄运 末日使者 4 Dragon Knight 龙 骑士 龙骑士 0 DrowRanger 卓尔 漫游者 卓尔游侠；黑暗游侠 3 EarthSpirit 大地 精神 大地之灵 4 EarthShaker 土地 振动器 撼地神牛；撼地者 4 ElderTitan 老的 泰坦 牛头人酋长（Tauren Chiefain）；上古泰坦 3 Ember Spirit 灰烬 精神 灰烬之灵 2 Enchantress 女巫 魅惑魔女 4 Enigma 谜 谜团 2 Faceless Void 没有脸的 空白 虚空假面 4 GrimStroke 严肃的 击打 天涯墨客（新） 5 Gyrocopter 旋翼机 矮人直升机 3 HoodWink 头巾 眨眼 森海飞霞（新） 5 Huskar 哈斯卡 神灵武士 4 invoker 祷告者 祈求者 3 Io 艾欧 小精灵：艾欧 3 Jakrio 杰奇洛 双头龙；杰奇洛 3 Juggernaut 世界主宰 主宰 0 KeeperOfTheLight 光之守望者 光之守卫 1 kunkka 昆卡 舰队统帅 3 LegionCommander 军团 长官 军团指挥官 1 Leshrac 拉什拉克 受折磨的灵魂 3 Lich 里奇 巫妖 3 LifeStealer 生命 小偷 食尸鬼；噬魂鬼 3 Lina 莉娜 秀逗魔导士（火女） 3 Lion 莱恩 恶魔巫师 3 LoneDruid 孤独的 德鲁伊教团员 德鲁伊 3 Luna 月亮；月神 露娜 3 Lycan 狼人 狼人 0 Magnus 马格纳斯 半人猛犸；马格纳斯 3 Marci 玛西 玛西（新） 0 Mars 火星 马尔斯（新） 2 Medusa 美杜莎 美杜莎 0 Meepo 米波 地卜师 4 Mirana 米拉娜 月之女祭司；白虎 3 MonkeyKing 猴子 王 齐天大圣（新） 4 Morphling 变形 变体精灵 4 NagaSiren 娜迦塞壬（娜迦海妖） 娜迦海妖 2 Nature’sProphet 自然的 先知 先知 3 Necrophos 瘟疫 死灵法师；瘟疫法师 3 NightStalker 夜晚 高视阔步者 暗夜魔王 4 NyxAssassin 尼克斯（司夜女神，夜的化身） 刺杀者 司夜刺客 5 OrgeMagi 食人魔 魔法师 食人魔魔法师 3 OmniKnight 全方位 骑士 全能骑士 3 Oracle 启示 神谕者 3 OutworldDestroyer 世界外的 毁灭者 黑曜毁灭者；殁境毁灭者 3 PhantomLancer 幻影 枪骑兵 幻影长矛手 1 Phoenix 菲尼克斯（凤凰） 凤凰 3 Pingolier 穿山甲 石鳞剑士（新） 3 PrimalBeast 原始 野兽 默（新） 4 Puck 顽皮的小精灵 精灵龙；帕克 3 Pudge 矮胖的人 屠夫；帕吉 3 pugna 帕戈纳（好斗的） 帕戈纳（骨法） 3 QueenOfPain 痛苦 女王 痛苦女王 0 Razor 剪刀 剃刀 0 Riki 有力量的 力丸 3 Rubick 魔术 拉比克；大魔导师 3 SandKing 沙子 王 沙王 3 ShadowDemeon 阴影 恶魔 暗影恶魔 1 ShadowFiend 阴影 魔鬼 影魔；奈文摩尔 3 ShadowShaman 阴影 萨满 暗影萨满；罗萨塔 3 Silencer 消音器 沉默术士 3 SkyWrathMage 天空 愤怒 法师 天怒法师 3 Slardar 斯拉达 鱼人守卫（大鱼人） 3 Slark 斯拉克 鱼人夜行者（小鱼人） 3 SnapFire 交换 开火 电炎绝手（新） 5 Sniper 狙击手 矮人火枪手 3 Spectre 幽灵 幽鬼 3 SpiritBreaker 精神 断路器 裂魂人（白牛） 3 StormSpirit 风暴 精神 风暴之灵 3 Sven 斯温（流浪） 流浪剑客 3 Techies 高科技专家 哥布林工程师 3 Templar Assassin 律师 刺客 圣堂刺客 3 TerrorBlade 恐怖 刀片 恐怖利刃 3 TideHunter 潮流 猎人 潮汐猎人 3 TimberSaw 木材 电锯 伐木机 3 Tinker 经验不足的修补匠 修补匠 0 Tiny 小的 小小 3 TreantProtector 树人 卫士 树精卫士 0 Troll Warlord 穴居巨怪 军阀 巨魔战将 3 Tusk 长牙 巨牙海民 4 UnderLord 下面 王子 孽主（新） 5 Undying 不死者 不朽尸王 4 Ursa 熊星座 熊战士；拍拍熊 3 VengefulSpirit 复仇的 精神 复仇之魂 3 VenomAncer 毒液 昂瑟 剧毒术士 3 Viper 毒蛇 冥界亚龙 5 Visage 面貌 维萨吉；死灵飞龙 5 VoidSpirit 空白 精神 虚空之灵 3 Warlock 魔术师 术士 1 Weaver 织工 地穴编织者 4 WindRanger 风 游荡者 风行者 3 WinterWyvern 冬季 飞龙 寒冬飞龙 3 WitchDoctor 巫师 医生 巫医 2 WraithKing 幽灵 王者 骷髅王；冥魂大帝 2 Zeus 众神之王 宙斯 3 总计120个英雄。","link":"/2022/02/27/DOTA/"},{"title":"pyplot","text":"数据不一定很好看，但是图一定要好看。 子图绘制12ax = plt.subplots(nrows:int, ncols:int) # ax[row][col]用来画子图，比较麻烦，一般不用。 基本信息123# 横纵坐标：命名plt.xlabel，设置间隙和坐标名称plt.xticks，# 图例和网格：图例plt.legend，网格plt.grid# 图片展示和保存：展示plt.show，保存plt.savefig 折线图123# 折线：plt.plot(x, y)# 标记设置：标记类型marker，标记大小markersize# 线条设置：宽度linewidth，颜色color，类型linestyle， 颜色信息、线条类型设置和标记类型设置如下表 柱状图和条形图柱状图 1234# 柱状：plt.bar(left, height, width=0.8, bottom=None)# 基本：相比折线图，left和height对应x和y，width是柱体的宽度，bottom是柱体的底部# 柱体设置：颜色facecolor（fc），填充hatch# 描边设置：颜色edgecolor（ec），宽度linewidth，类型linestyle 条形图 1# 柱状的旋转变体条形：plt.barh(bottom, width, height=0.8, left=None) 常见柱体填充1hatch = ['//','\\\\\\\\','xx','--','o','/','+','.','*','-','|'] 散点图123# 散点图：plt.scatter(x, y, s) s表示区域大小# 点类型：样式marker，宽度linewidth# 点颜色：颜色color，颜色可以是序列，alpha透明度，cmap='Blues'表示对应的色盘 用法举例123plt.scatter(np.random.rand(100), np.random.rand(100), s=(1+np.random.rand(100))*100, c=np.random.rand(100), cmap='viridis', alpha=0.5)plt.colorbar()plt.show()","link":"/2022/01/12/pyplot/"},{"title":"Attributes in Dota","text":"A Numerical Analysis Armor Armored to the teeth! — clockwerk Armor is a stat that reduces (or increases, if negative) physical damage a unit takes from abilities and attacks. Every unit is capable of gaining or losing armor, and most units start with a small amount of base armor, some even starting with negative armor. A hero’s armor can be passively increased with Agility attribute symbol.png agility via leveling up, certain items, Talent talents and some abilities. Armor of any unit can also be temporarily increased or reduced with some abilities. \\sum Armor = MainArmor + BonusArmorBase ArmorBase armor is the part of the main armor that never changes throughout a game. It consists of one fixed value set for each unit individually. The base armor of a unit can be a negative number. Main ArmorMain armor consists of base armor and the armor granted by a hero’s agility. The only way to improve a hero’s main armor is to increase its Agility attribute symbol.png agility, which is gained by leveling up, acquiring certain items, or with the help of certain abilities. The main armor is defined as MainArmor = (BaseArmor + \\sum Agility/6) * (1 - ArmorNegation)Bonus ArmorBonus armor is the armor value shown in green numbers with a plus on the left, right after the white armor number on a unit’s statistics. Whenever an armor granting item or armor increasing ability shows a +Value Armor. Probably the most important difference between main and bonus armor is that illusions only benefit from main armor, although their HUD still shows the bonus armor just like on other heroes, to make them less obvious to the enemy. Sources of multiple bonus armor stack additively. Modifying ArmorA lot of abilities and items have abilities that grant or reduce armor. These changes mostly affect bonus armor, and are never added to the main armor. Damage MultiplierAll units, including buildings, have an inherent base armor value and defense class. Any physical damage dealt to a unit is multiplied by the damage multiplier, resulting in either damage reduction or increase depending on the target’s armor value. Damage Multiplier is also used to calculate a unit’s Effective HP (EHP). The lower the damage multiplier, the higher the Effective HP of a unit, vice versa. Armor Formula Base $b$ Armor Formula Factor $f$ 1 0.06 For any real-valued armor, the damage multiplier is defined as D^{M} = 1 - \\frac{f*Armor}{b+f * |Armor|} \\in (0, 2)Effective HPEffectiveHP = \\frac{CurrentHP}{D^M}The total amount of physical damage a unit can take due to the armor it has is known as Effective HP (or EHP). 16.66 armor adds 100% to EHP. This means a unit with 1000 health and 16.66 armor can take 2000 physical damage. The formula adds 6% EHP per point of armor regardless of the previous armor value. However, EHP value is of a diminished benefit as a player gaining 1 armor from 0 armor would increase EHP from 100% to 106%, while a player gaining 1 armor from 50 armor would increase EHP from 400% to 406%. On the other hand, the effectiveness of armor is much lower at negative values (refer to the attached graph). Total EHP trends downwards towards 50%, meaning a unit with 1000 health and infinitely low armor would still be able to take 500 physical damage. At this point, losing or gaining 1 armor has essentially no effect. Magic Resistance The magic harms me not. —Anti-Mage Magic Resistance is a stat that reduces (or increases, if negative) magical damage a unit takes from spells and magic attacks. Every unit is capable of gaining or losing magic resistance, and most units start with a small amount of base resistance. A hero’s magic resistance can be passively increased with Talent talents, certain items, and some abilities. Magic resistance of any unit can also be temporarily increased or reduced with some abilities. MagicResistance = 1 - (1 - BasicResistance) * \\prod(1 - Modifier)Base Magic ResistanceBase Magic Resistance is a value that never changes throughout a game. It consists of one fixed value set for each unit individually. The base magic resistance of a unit can be a negative number. All 123 heroes currently have the same Base Magic Resistance value: 25%. Base Magic Resistance NegationSome abilities negate or ignores a unit’s base magic resistance by removing a percentage of the base magic resistance on the target. This magic resistance negation only affects the base magic resistance value of units, other sources of magic resistance modifiers are not affected. Total Magic DamageCalculating the total magic damage of an ability involves using a few multipliers, Magic Resistance Multiplier, Actual Base Magic Resistance, Magic Damage Barrier and Magic Damage Negation Sources (if any). The total or actual magic damage dealt is equal to how much health a target immediately loses as a direct result. Actual magic damage dealt after magic resistance is defined as MagicDamageDealt = (MagicalDamage - Barrier - Negations) * (1 - MagicResistance)Effective HPThe total amount of magic damage a unit can take due to magic resistance is known as effective HP (or EHP). Despite each source of magic resistance increasing the magic resistance value less the higher it is and making them seem less effective, each sources increases the unit’s effective HP against magic damage by their base value. This definition of EHP assumes all damage taken is magic damage. EHP against physical damage (such as basic hero attacks etc.) is modified by armor. Effective HP against magical damage is defined as Effective HP = \\frac{Current HP}{1 - MagicResistance}Pure DamagePure Damage is a damage type that is not reduced by Armor or Magic Resistance. It is also not amplified by magical damage amplification abilities, fully ignores Armor and Damage Block. It does not affect invulnerable units. There are a few sources that can manipulate Pure Damage, with Dispersion being one of them. This mechanic is called damage reduction. Pure damage affects units with Spell Immunity (because spell immunity does not block damage), but that does not mean that an ability that deals pure damage is able to target spell immune units.","link":"/2022/03/22/Attributes-in-Dota-A-Numerical-Analysis/"},{"title":"RUN TO THE WORLD","text":"Hustling and bustling, all for benefits. A young man sees a sunset and, unable to understand or to express the emotion that it rouses in him, concludes that it must be the gateway to a world that lies beyond. It is difficult for any of us in moments of intense aesthetic experience to resist the suggestion that we are catching a glimpse of a light that shines down to us from a different realm of existence, different and, because the experience is intensely moving, in some way higher. And, though the gleams blind and dazzle, yet do they convey a hint of beauty and serenity greater than we have known or imagined. Greater too than we can describe; for language, which was invented to convey the meanings of this world, cannot readily be fitted to the uses of another. That all great art has this power of suggesting a world beyond is undeniable. In some moods, Nature shares it. There is no sky in June so blue that it does not point forward to a bluer, no sunset so beautiful that it does not waken the vision of a greater beauty, a vision which passes before it is fully glimpsed, and in passing leaves an indefinable longing and regret. But, if this world is not merely a bad joke, life a vulgar flare amid the cool radiance of the stars, and existence an empty laugh braying across the mysteries; if these intimations of a something behind and beyond are not evil humour born of indigestion, or whimsies sent by the devil to mock and madden us, if, in a word, beauty means something, yet we must not seek to interpret the meaning. If we glimpse the unutterable, it is unwise to try to utter it, nor should we seek to invest with significance that which we cannot grasp. Beauty in terms of our human meanings is meaningless.","link":"/2022/03/21/JUST-DO-IT/"},{"title":"Europia Universalis IV","text":"The most important thing to realize in this game is that the player is an omnipresent, immortal leader of a country in which the rulers and armies within it will follow your every command. Europa Universalis IV is a game in which YOU explore, expand, exploit, and exterminate. The start date of 1444-11-11 (11th of November 1444) is set up to be as historical as possible. However, as soon as the game is unpaused, history will often veer off its rails and become an alternate Earth where players can influence the destiny of nations. While rulers of different dynasties might rule the nation, the player still guides it until the end date or the last province is lost. There are no specific victory conditions in Europa Universalis IV, and the players are free to take history in whatever direction they desire. Even though score exists, it’s only used in some multi-player games. Your goal could be to take a small nation with a single province and turn it into a powerhouse, take control of a historically powerful nation and cause it to crumble, or anything in between. Many players tailor their games toward earning specific achievements. Game events are based on real history and can often be further researched via Wikipedia or other sources. HintsStarting the first game as the Ottomans, possibly the strongest nation on Earth at this time, is advised. The Ottomans have just defeated the forces of Europe at Battle of Varna and conquered a large part of Greece, so they start out with a peace treaty with some nations. It gives the Ottomans time to conquer some small nearby countries before any larger wars begin. Major nations are a good choice since you can recover even after finding yourself on the losing side of a war, especially since doing a re-conquest and taking back provinces is very satisfying. Read a nation’s wiki page to get some understanding of its situation in the game. A normal game might be over after 100 hours. In this game, the community is still considering a player with just 500 hours as a beginner to the game. There are many who have played this game for thousands of hours. So expect to enjoy this game for a long time. What this game is notThis is not a pure wargame. This is not a roleplaying game. This is not a tactical combat simulator. This is not a turn-based game. This is not a quick-binge game. This is not a Civilization game. Beginning CountryOttomans which in 1444 is a military powerhouse in the Eastern Mediterranean, Eastern Europe, and the Middle East, with many opportunities to expand militarily with leeway for mistakes due to its sheer stature. Castile which in 1444 is arguably the dominant state in the Iberian peninsula, yet without any major rivals save the southerly Berber states of Granada, Morocco etc., and later France, who however is not particularly interested in conquering Spanish land. Castile also has interesting missions and events, quick short-term goals to form the Kingdom of Spain and the Reconquista, easy long-term goals such as colonization, while domestically it is almost entirely religiously and culturally unified. Portugal which in 1444 has the potential to become the biggest colonial power and only has two immediate neighbors: Castile, who is friendly towards you, and Morocco, who can be easily neutered using the aid of Castile. Manage GovernmentThe most important button in this game is at the top left-hand corner of the screen. It will look like a shield with the flag of your nation on it. When you click this button, a window appears with many different tabs at the top, showing your leader and their stats as well as spots of vacant advisors. Before you go along and fill them up, you need to worry about the currency of the game. Go to the fourth tab and it will show you the economy of the nation. Most nations start the game with an economy that is making money every turn. You should check back periodically to make sure that your nation is always profitable. Now, it is time to go back to that first menu and hire some advisors. There are three slots for three different categories of advisors: administrative (represented in-game with a paper and quill), diplomatic (represented in-game with a dove) and military (represented in-game with two crossed swords). You may only have one of each type. If you are making less than 4 ducats per month you shouldn’t hire any advisors. If you are making less than 30 ducats per month you should stick with an advisor with a level of 1. This is because advisors increase in cost quadratically according to their rank. Different advisors may provide different bonuses on different values in game according to their category. So military advisors may give a boost to your army, while diplomatic advisors offer more bonuses in relation to other countries. It doesn’t really matter what kind of advisor you pick for now, as long as you find one for each category. If you read the description on them, you can tell what sort of advisor they are. Later on, you can pick them for a specific need, but since all of them are relatively useful, just go for the cheaper ones. Territory &amp; ArmiesNow that you have selected your advisors and are still making money, it is time to look at your nation. Your nation will be composed of one or more provinces. Your country is only comprised of land provinces. No one truly “owns” sea provinces, though you have the ability to affect naval control and trade in nearby sea provinces. There will always be a capital province in your nation. If you know world geography, these often correspond to where the capital of the country is today. London is the capital province of England and so on. There may also be a separate trade capital, though the national capital is most often the same province as your trade capital. You may notice some figures on your provinces, such as a 3D “toy soldier” to represent your armies or small 3D ships. These are the units that you will use to fight wars. Your neighbors will have their own forces. Building units takes quite a while, so you should always have some units on hand. If you go to the interface screen that you were at earlier and go to the military tab you can see how many land and naval units you have as well as your force limit. The force limit is a “soft cap” which means that you can build over that quantity of regiments or ships, except that each additional unit will cost more and more. You can click on a particular unit to select it or drag click over an area to select multiple units. Moving units to a friendly province will result in a yellow arrow. Moving units to an enemy province or one besieged will have the arrow show as red. If you keep a unit selected as it moves, the progress between provinces actually looks like a progress bar. You can cancel the move until they are halfway there. Halting a move doesn’t have a direct repercussion on your troops except that if you want to move to that same province again you’ll have to restart the march all over again. Movement may also subject the unit to other effects, such as attrition due to supply limits, weather, or moving over hostile territory.","link":"/2022/03/23/Europia-Universalis-IV/"},{"title":"Ruler in EU4","text":"Each country is headed by a ruler. In EU4, rulers are influential in the running of a country, having between 0 and 6 points of administrative, diplomatic and military skill; these skills contribute directly to the nation’s monthly generation of monarch power. Rulers may be either a monarch, who as an heir inherits the title from a relative in a monarchy, or an elected leader of a republic or theocracy. MonarchyMonarchs (rulers of countries with a monarchy government type) rule until death, and have an heir to succeed them and inherit the throne.The system is nearly identical to EU3’s system of monarchs, heirs and dynasties. A dynasty is acquired through: Spread from other dynasties Pretender rebels Events: Dynamic “disasters”, such as the War of the Roses or the Castilian Civil War, or generic events, such as some of the Dynastic events. Dynasties, especially those initially found in powerful countries, can be shared by several countries. A shared dynasty grants a +25 bilateral bonus to relations with all countries with which the dynasty is shared. Spreading your dynasty involves first and foremost royal marriages, prestige and several other parameters. A shared dynasty is one of the requirements for the claim throne mechanic, which is an important part of the succession war and inheritance mechanics.","link":"/2022/03/24/Ruler-in-EU4/"},{"title":"GFW and Monarchy","text":"Monarchy is bad for almost all the organazations beacuse people in this system intend to keep good relationship with resource allocators rather than create value in their lives. In addition, such phenonmenon is in fact an elephant in the room which can not be easily changed because of limitations on the freedom of freedom. Time goes by, organizations will not move forward and a “Human-Eaten” society will formulate. GFW, of which full name is the Great Firewall, is famous as the Great Wall in the world. GFW is used to block access to selected websites and to slow down cross-border internet traffic in China. GFW has deeply affected the lives of everyone’s life in China and government didn’t want to admit it. At the legislative level, overcoming the wall is strictly limited, however, not from the clear laws—they even deny the existence of GFW. The government use some elastic laws which only they know how to interprete to arrest and threat the anti-people. “If the punishment is unknown, the power is unpredictable.” Is that over? No, the elastic laws is not only about GFW, “Pick a Quarrel” criminal, “Spread Rumor” criminal, and many other laws is interpreted by the resource allocators. These laws were made to formulate a better world, but almost they were executed only on the general people. Strict Legislation, General Illegal, Selective Enforcement. This is a common phenomenon and balance in our society, just like the existence of GFW. GFW holders know the climbers, both holders and climbers acquiesced it, some bad luck guys will be found and caught, and no one knows whether he or she has a good luck. But if you become a resource allcator, things will change a lot. You can interprete the elastic laws as you wish, you use this law to arrest the person you hate and protect the person you like. So you need to keep good relationship with the biggest resource allcator—monarchy, to have more power. And then, relationship, but not creativity become the most useful skill in our society. Finally, time goes by, organizations will not move forward and a “Human-Eaten” society will formulate.","link":"/2022/03/26/Monarchy/"},{"title":"Recent Movies","text":"Some interesting movies me watched this weekend. FreshFresh is a 2022 American comedy thriller film directed by Mimi Cave, in her directorial debut, from a screenplay by Lauryn Kahn. It stars Daisy Edgar-Jones and Sebastian Stan. The film is a co-production between Legendary Pictures and Hyperobject Industries; Adam McKay produced the film alongside Kevin J. Messick and Maeve Cullinane. The plot follows a young woman who starts dating a charming man, only to discover his horrifying true nature. The film premiered at the Sundance Film Festival on January 20, 2022, and was released on March 4, 2022, on Hulu by Searchlight Pictures. It received generally positive reviews from critics. ScreamScream (also known as Scream 5) is a 2022 American slasher film directed by Radio Silence (Matt Bettinelli-Olpin and Tyler Gillett) and written by James Vanderbilt and Guy Busick. It is the fifth installment in the Scream film series. Though billed as a relaunch of the film series, the film is a direct sequel to Scream 4 (2011) and is the first film in the series to not be directed by Wes Craven, following his death in 2015. The film is dedicated to Craven at the beginning of the closing credits. The film stars Melissa Barrera, Kyle Gallner, Mason Gooding, Mikey Madison, Dylan Minnette, Jenna Ortega, Jack Quaid, Jasmin Savoy Brown, and Sonia Ammar, alongside Roger L. Jackson, Marley Shelton, Skeet Ulrich, Courteney Cox, David Arquette, and Neve Campbell, who reprise their roles from previous installments. The film takes place twenty-five years after the original Woodsboro murders, when yet another Ghostface appears and begins targeting a group of teenagers who are each somehow linked to the original killings. Similar to previous entries, Scream combines the violence of the slasher genre with elements of black comedy and “whodunit” mystery to satirize the trend of reboots and legacy sequels. The film also provides commentary on the horror fandom culture, particularly the divide between “elevated horror” and classic slasher films. NerveNerve is a 2016 American techno-thriller adventure film directed by Henry Joost and Ariel Schulman and written by Jessica Sharzer, based on the 2012 novel of the same name by Jeanne Ryan. The film stars Emma Roberts, Dave Franco and Juliette Lewis, and revolves around an online truth or dare game, which allows people to enlist as “players” or “watchers” and as the game progresses further, the players are contacted and invited to participate in more dangerous and risky dares than their prior ones. The film premiered at the SVA Theater on July 12, 2016 and was theatrically released on July 27, 2016, by Lionsgate. It received positive reviews from critics for its energy and the chemistry of its cast, and grossed over $85 million worldwide against a $19 million budget. Red NoticeRed Notice is a 2021 American action comedy film written, directed, and produced by Rawson Marshall Thurber. Dwayne Johnson, who also served as a producer, stars as an FBI agent who reluctantly teams up with a renowned art thief (Ryan Reynolds) in order to catch an even more notorious criminal (Gal Gadot). The film marks the third collaboration between Thurber and Johnson, following Central Intelligence (2016) and Skyscraper (2018). Originally planned for release by Universal Pictures, the film was acquired by Netflix for distribution. It began a limited theatrical release on November 5, 2021 before digitally streaming on the platform on November 12, 2021. The film received mixed reviews from critics and positive response from the audience, who praised the performances of the cast (particularly Reynolds and Johnson), humor and action sequences but criticized lack of originality. It became the most-watched film in its debut weekend on Netflix, as well as the most-watched film within 28 days of release on the platform. It also became the 5th most-streamed movie title of 2021. Finally, it’s time to study and work.","link":"/2022/04/04/Recent-Movies/"},{"title":"Old Games","text":"Many old games can still exist in our lives. It is a really interesting thing. Some Bilibiliers(Ups) in Red Alert 2 is very popular, such as HBKB08, Moon3 and etc. Many people like watching their videos. The video view times of their some videos can reach to about 500,000 in one day, which is a big number in Bilibili website. Does such phenomenon demonstrate that Red Alert 2 is a popular and attractive game? Maybe the answer is no. These Ups are popular doesn’t mean the game is also popular and attractive. The reason why these Ups are popular includes many aspects: their speaking style, how they deal with their videos and so on. Many people just like watching their shows and listening their voice, but not the game itself. On the other hand, many audience in Bilibili website is in 20s-30s. Red Alert 2 is a common memory in their childhood. When they watch these Ups, they are just like going back to the past time. At that time, these part of audience like playing RA2, but was not good at it due to the information and technology limitation. Time went by, they grew up and stop playing it gradually. But when a skillful player showed them how to play it in an interesting way, they will get the excitement at once. So they like watching these Ups’ videos. In fact, these old games are not interesting and attractive as these audience imagine especially for the people who didn’t play these games before. Just Compared Red Alert 3 with Red Alert 2, you will know how old and shabby RA2 is. RA3 have a more beautiful clear images with higher resolution and different fluency control windows, but few people prefer playing RA3 to RA2 in China. The quality of RA3 is much better than RA2 with no doubt, but why RA3 can not compete with RA2? There are many reasons in different aspects. If I want to explain all the reasons, a 500 pages book will not be enough. Nevertheless, the most important thing is the comfort zone. People like playing the old games with low quality because these games ever brought their happiness and they were familar with these games. Without learning new knowledge, just double cilck the icon, and they will get a different feeling from their childhood. These games are their comfort zone, so they like playing, watching and even spending money on it. Besides RA2, WarCraftIII, DNF, StarCraft, Dota, Poker are all these old games.","link":"/2022/04/07/Old-Games/"},{"title":"REST api","text":"A web API (or web service) conforming to the REST architectural style is a REST API. REST is an acronym for REpresentational State Transfer and an architectural style for distributed hypermedia systems. Roy Fielding first presented it in 2000 in his famous dissertation. Like other architectural styles, REST has its guiding principles and constraints. These principles must be satisfied if a service interface needs to be referred to as RESTful. Guiding Principles of RESTThe six guiding principles or constraints of the RESTful architecture are: Uniform InterfaceBy applying the principle of generality to the components interface, we can simplify the overall system architecture and improve the visibility of interactions. Multiple architectural constraints help in obtaining a uniform interface and guiding the behavior of components. The following four constraints can achieve a uniform REST interface: Identification of resources – The interface must uniquely identify each resource involved in the interaction between the client and the server. Manipulation of resources through representations – The resources should have uniform representations in the server response. API consumers should use these representations to modify the resources state in the server. Self-descriptive messages – Each resource representation should carry enough information to describe how to process the message. It should also provide information of the additional actions that the client can perform on the resource. Hypermedia as the engine of application state – The client should have only the initial URI of the application. The client application should dynamically drive all other resources and interactions with the use of hyperlinks. Client-ServerThe client-server design pattern enforces the separation of concerns, which helps the client and the server components evolve independently. By separating the user interface concerns (client) from the data storage concerns (server), we improve the portability of the user interface across multiple platforms and improve scalability by simplifying the server components. While the client and the server evolve, we have to make sure that the interface/contract between the client and the server does not break. StatelessStatelessness mandates that each request from the client to the server must contain all of the information necessary to understand and complete the request. The server cannot take advantage of any previously stored context information on the server. For this reason, the client application must entirely keep the session state. CacheableThe cacheable constraint requires that a response should implicitly or explicitly label itself as cacheable or non-cacheable. If the response is cacheable, the client application gets the right to reuse the response data later for equivalent requests and a specified period. Layered SystemThe layered system style allows an architecture to be composed of hierarchical layers by constraining component behavior. For example, in a layered system, each component cannot see beyond the immediate layer they are interacting with. Code on Demand (Optional)REST also allows client functionality to extend by downloading and executing code in the form of applets or scripts. The downloaded code simplifies clients by reducing the number of features required to be pre-implemented. Servers can provide part of features delivered to the client in the form of code, and the client only needs to execute the code. What is a Resource?The key abstraction of information in REST is a resource. Any information that we can name can be a resource. For example, a REST resource can be a document or image, a temporal service, a collection of other resources, or a non-virtual object (e.g., a person). The state of the resource, at any particular time, is known as the resource representation. The resource representations are consist of: the data the metadata describing the data and the hypermedia links that can help the clients in transition to the next desired state. Resource IdentifiersREST uses resource identifiers to identify each resource involved in the interactions between the client and the server components. HypermediaThe data format of a representation is known as a media type. The media type identifies a specification that defines how a representation is to be processed. A RESTful API looks like hypertext. Every addressable unit of information carries an address, either explicitly (e.g., link and id attributes) or implicitly (e.g., derived from the media type definition and representation structure). Hypertext (or hypermedia) means the simultaneous presentation of information and controls such that the information becomes the affordance through which the user (or automaton) obtains choices and selects actions.Remember that hypertext does not need to be HTML (or XML or JSON) on a browser. Machines can follow links when they understand the data format and relationship types.— Roy Fielding Self-DescriptiveFurther, resource representations shall be self-descriptive: the client does not need to know if a resource is an employee or a device. It should act based on the media type associated with the resource. So in practice, we will create lots of custom media types – usually one media type associated with one resource. Every media type defines a default processing model. For example, HTML defines a rendering process for hypertext and the browser behavior around each element. Media Types have no relation to the resource methods GET/PUT/POST/DELETE/… other than the fact that some media type elements will define a process model that goes like “anchor elements with an href attribute create a hypertext link that, when selected, invokes a retrieval request (GET) on the URI corresponding to the CDATA-encoded href attribute.” Resource MethodsAnother important thing associated with REST is resource methods. These resource methods are used to perform the desired transition between two states of any resource. A large number of people wrongly relate resource methods to HTTP methods (i.e., GET/PUT/POST/DELETE). Roy Fielding has never mentioned any recommendation around which method to be used in which condition. All he emphasizes is that it should be a uniform interface. For example, if we decide that the application APIs will use HTTP POST for updating a resource – rather than most people recommend HTTP PUT – it’s all right. Still, the application interface will be RESTful. Ideally, everything needed to transition the resource state shall be part of the resource representation – including all the supported methods and what form they will leave the representation. We should enter a REST API with no prior knowledge beyond the initial URI (a bookmark) and a set of standardized media types appropriate for the intended audience (i.e., expected to be understood by any client that might use the API).From that point on, all application state transitions must be driven by the client selection of server-provided choices present in the received representations or implied by the user’s manipulation of those representations.The transitions may be determined (or limited by) the client’s knowledge of media types and resource communication mechanisms, both of which may be improved on the fly (e.g., code-on-demand). [Failure here implies that out-of-band information is driving interaction instead of hypertext.] REST and HTTP are Not the SameMany people prefer to compare HTTP with REST. REST and HTTP are not the same. REST != HTTP Though REST also intends to make the web (internet) more streamlined and standard, Roy Fielding advocates using REST principles more strictly. And that’s from where people try to start comparing REST with the web. Roy Fielding, in his dissertation, has nowhere mentioned any implementation direction – including any protocol preference or even HTTP. Till the time, we are honoring the six guiding principles of REST, which we can call our interface – RESTful. SummaryIn simple words, in the REST architectural style, data and functionality are considered resources and are accessed using Uniform Resource Identifiers (URIs). The resources are acted upon by using a set of simple, well-defined operations. Also, the resources have to be decoupled from their representation so that clients can access the content in various formats, such as HTML, XML, plain text, PDF, JPEG, JSON, and others. The clients and servers exchange representations of resources by using a standardized interface and protocol. Typically HTTP is the most used protocol, but REST does not mandate it. Metadata about the resource is made available and used to control caching, detect transmission errors, negotiate the appropriate representation format, and perform authentication or access control. And most importantly, every interaction with the server must be stateless. All these principles help RESTful applications to be simple, lightweight, and fast.","link":"/2022/04/10/REST-api/"},{"title":"Metric Space","text":"Metric Space, Cover, Pack and Lipschitz Continuity. Metric SpaceIn mathematics, a metric space is a nonempty set together with a metric on the set. The metric is a function that defines a concept of distance between any two members of the set, which are usually called points. The metric satisfies a few simple properties: the distance from $A$ to $B$ is zero if and only if A and B are the same point. the distance between two points are positive. the distance from $A$ to $B$ is the same as the distance from $B$ to $A$, and the distance from $A$ to $B$ is less than or equal to the distance from A to B via any third point C. Covering Number and Packing NumberIn mathematics, a covering number is the number of spherical balls of a given size needed to completely cover a given space, with possible overlaps. Two related concepts are the packing number, the number of disjoint balls that fit in a space, and the metric entropy, the number of points that fit in a space when constrained to lie at some fixed minimum distance apart. Let $(Z, d)$ be a metric space, let $K$ be a subset of $Z$, and let r be a positive real number. Let $B_r(x)$ denote the ball of radius $r$ centered at $x$. A subset $C$ of $Z$ is an $r-external$ covering of $K$ if: K \\subseteq \\cup _{x\\in C} B_r(x)In other words, for every $y \\in K$ there exists $x \\in C$ such that $d(x,y) \\leqslant r$. If furthermore $C$ is a subset of $K$, then it is an r-internal covering. The external covering number of $K$, denoted $N_{r}^{\\text{ext}}(K)$, is the minimum cardinality of any external covering of K. The internal covering number, denoted $N_{r}^{\\text{int}}(K)$, is the minimum cardinality of any internal covering. A subset $P$ of $K$ is a packing if $P \\subseteq K$ and the set ${B_{r}(x)}_{x\\in P}$ is pairwise disjoint. The packing number of $K$, denoted $N_{r}^{\\text{pack}}(K)$, is the maximum cardinality of any packing of $K$. A subset $S$ of $K$ is r-separated if each pair of points $x$ and $y$ in $S$ satisfies $d(x, y) \\geqslant r$. The metric entropy of $K$, denoted $N_{r}^{\\text{met}}(K)$, is the maximum cardinality of any r-separated subset of $K$. Covering number and packing number will be written as $N(Z, d, r), M(Z, d, r), $ respectively. Metric entropy also equals to $log N(Z, d, r)$. Lipschitz ContinuityIn mathematical analysis, Lipschitz continuity, named after German mathematician Rudolf Lipschitz, is a strong form of uniform continuity for functions. Intuitively, a Lipschitz continuous function is limited in how fast it can change: there exists a real number such that, for every pair of points on the graph of this function, the absolute value of the slope of the line connecting them is not greater than this real number; the smallest such bound is called the Lipschitz constant of the function (or modulus of uniform continuity). For instance, every function that has bounded first derivatives is Lipschitz continuous. We have following chain of strict inclusions for functionsover a closed and bounded non-trivial interval of the real line (So strong!) Continuously Differentiable $\\subset$ Lipschitz Continuous$\\subset$ $\\alpha-$ Holder Continuous $\\subset$ Uniformly Continuous = Continuous Lipschitz Continuity Defintion: Given two metric spaces $(X, dX)$ and $(Y, dY)$, where $dX$ denotes the metric on the set $X$ and $dY$ is the metric on set $Y$, a function $f : X \\rightarrow Y$ is called Lipschitz continuous if there exists a real constant $K \\geqslant 0$ such that, for all $x_1$ and $x_2$ in $X$, dY(f(x_1), f(x_2)) \\leqslant KdX(x_1, x_2)","link":"/2022/04/20/Metric-Space/"},{"title":"My Blog on Linux: A Burdensome Tour","text":"I always write some essays on my hexo-style blog using different Windows PCs. Today when I changed my PC to Linux OS, many problems incurs, especially on how to implement version control on diversified softwares. node, npm, nvmNode.js is commonly used in areas of Web and GUI without doubt. My blog is also deployed and decorated in hexo, a node module. In past few days, When I use hexo deploy blog on my windows PC, it is easy and convenient. Just download node.js and Node Package Manager(npm), and use some intstructions, all the things would be done. But things are different on my Linux PC. First, I want to use apt-get to install node.js. But the version of my Linux is ubuntu18.04 and the node.js package downloaded from apt is 3.5.2, which is much lower than many package requirements. Besides, after installing npm I want to update my node.js, but it told me npm version was not suitable for node version. So I have to use the low version node.js and npm to install hexo and there are many warnings during the process of installation. Second, when I use the node and npm from apt, the installation of hexo will incur a EACCESS error. That is, it can not handle the global installation. ‘npm install xx -g’ is actually a joke! I need to find alternative methods. Third, finally I read the hexo document, it told me that if I want to install node and npm on Linux, you’d better install nvm first. what the hell is that??? I just want to use hexo. But I have no choice to find out how to install it. Fortunately, it is a POSIX-compliant bash script. Cloning and running this script compliation, dazzled versions of node and npm were installed. At last, I can change it with fluency and hexo is constructed on my Linux PC. hexo and themesWhen I finish my installation tour of nvm, node, npm and hexo, I think the remaining will be done quickly. However, I was in a cheerful mood too early. After cloning my blog source code to local and implement ‘npm install’ instruction, hexo can not convert markdown files to html format. Themes also need to be installed. So I clone the latest version of my hexo theme icarus repository and received a unexpected result: version not suitable. Fortunatelly, I find the icarus github page and solve this question by installing it using npm. EnlightmentThis process took me about whole afternoon time. I was taught a lesson and will consider below tips when I install something on my Linux PC next time. Apt-get is a useful tool while downloading and installing some mature Unix tools such as curl, wget, sed, grep and etc. With regard to the rapidly changed softwares, Apt-get is usually not a good scheme. There are so many versions of some new widely used tools and their packages, such as node, python, go, docker and so on. Apt-get is not a professional expert in the version control domains. Using specific version control tools but not apt maybe an efficient method for these softwares. Official websites and documents is really useful. If you want to use some tools to do some interesting things, it is not bad to read the official instructions in advance. Don’t do it for granted, but plan the best way. Linux is not as good as in imagination because many problems incur when you would like things to run. If you don’t care the details in one software, Windows will be better than Linux.","link":"/2022/04/10/My-Blog-on-Linux-A-Burdensome-Tour/"},{"title":"About Real Line","text":"Simply, real line is an infinite, totally ordered and continuous set, a strongly stricted set. ContinuousContinuous is an extremely strong condition, since we can not even find one set with continuation in our real world. Almost every substance can be divided into a small atom, and as an illustraion, the letters exhibited on our screens is also composed of massive electronics. This point is so common in daily life, but I never realized and thought of it before somewhat due to the mathematics education I have been given in past several years. Totally OrderedAn order set is a relational structure $(S, \\preccurlyeq)$ such that the relation $\\preccurlyeq$ is totally ordering. This condition can be seen in our lifestyles but also difficult to satisfy. Needless to say totally ordered, if one set is partially ordered, the set must be quite useful to create some technologies. More WordsActually we study many operations on the real line, such as addition, substraction, multiplication, division, limit, integral and differential. However, maybe we ignore the simplest thing, the mapping relationship between real-world items and the abstract mathematics models. But an observed and changeable real world is the origin of our interest while interest is the motivation why we do one thing. Unfortunately, the education we were given and maybe, our next generation in mainland will be given would be abounding with disconnected theory and reality. What’s worse, the next generation will have to accept some so-called preconceived “knowledge” full of ideology whatever the truth is, whereas they can not resist it, even can not make a sound. They will doubt what they have learned from the textbooks when they stepped into this society. Not until then do they realize the lies in their education but interest is lost, and the only thing they can do, is to admit what happened, and afterward feed up with their next generations at that time.","link":"/2022/04/28/About-Real-Line/"}],"tags":[{"name":"随笔","slug":"随笔","link":"/tags/%E9%9A%8F%E7%AC%94/"},{"name":"算法","slug":"算法","link":"/tags/%E7%AE%97%E6%B3%95/"},{"name":"论文阅读","slug":"论文阅读","link":"/tags/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"},{"name":"Games","slug":"Games","link":"/tags/Games/"},{"name":"thought","slug":"thought","link":"/tags/thought/"},{"name":"Essay","slug":"Essay","link":"/tags/Essay/"},{"name":"Algorithm","slug":"Algorithm","link":"/tags/Algorithm/"}],"categories":[]}